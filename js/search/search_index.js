var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.474,1,2.004]],["body/controllers/AppController.html",[0,2.411,1,2.671,2,1.433,3,0.369,4,0.324,5,0.372,6,2.542,7,1.016,8,3.019,9,0.468,10,1.637,11,3.485,12,5.146,13,3.058,14,2.162,15,0.035,16,3.058,17,3.279,18,3.527,19,3.485,20,3.706,21,3.279,22,1.151,23,3.058,24,2.162,25,3.485,26,1.194,27,0.7,28,1.093,29,5.392,30,2.394,31,1.529,32,4.783,33,1.791,34,4.192,35,3.019,36,0.873,37,3.058,38,3.058,39,2.938,40,2.162,41,2.394,42,1.095,43,2.162,44,3.019,45,0.571,46,1.949,47,1.543,48,2.542,49,0.7,50,2.654,51,2.542,52,3.485,53,3.883,54,1.433,55,2.542,56,1.746,57,1.949,58,0.369,59,0.197,60,0.839,61,0.917,62,2.542,63,0.917,64,3.485,65,2.411,66,3.485,67,1.052,68,3.058,69,3.058,70,3.058,71,3.058,72,0.016,73,0.023,74,0.016]],["title/modules/AppModule.html",[36,0.655,75,1.796]],["body/modules/AppModule.html",[1,2.944,2,1.877,3,0.558,4,0.303,5,0.311,15,0.035,33,1.712,36,0.962,45,0.64,49,0.656,50,2.815,51,2.381,58,0.346,59,0.185,67,0.719,72,0.015,73,0.022,74,0.015,75,3.475,76,1.224,77,1.224,78,1.636,79,1.636,80,1.636,81,2.165,82,1.478,83,2.381,84,2.381,85,2.381,86,3.116,87,2.948,88,2.815,89,3.007,90,2.288,91,1.636,92,1.342,93,2.864,94,3.189,95,2.165,96,4.006,97,2.381,98,2.381,99,2.864,100,2.381,101,4.006,102,1.636,103,2.381,104,1.538,105,1.478,106,2.864,107,2.381,108,2.864,109,2.864,110,1.825,111,2.063,112,2.063,113,1.478,114,2.864,115,2.864,116,2.067,117,2.553,118,2.864,119,2.864,120,2.864,121,2.383,122,2.864,123,2.864,124,2.864,125,4.62,126,3.604,127,4.006,128,4.006,129,1.954,130,4.006,131,1.374,132,4.006,133,4.006,134,2.864,135,4.006,136,2.864,137,2.063,138,2.864,139,2.864,140,2.864,141,2.864,142,2.864,143,2.864,144,2.864,145,2.864,146,2.864,147,2.864,148,2.864,149,2.864]],["title/injectables/AppService.html",[50,1.623,150,1.03]],["body/injectables/AppService.html",[3,0.428,4,0.375,5,0.4,7,0.789,9,0.542,10,1.807,15,0.035,22,1.27,24,2.386,26,1.384,27,0.811,28,1.267,31,1.27,39,2.641,40,2.386,41,2.941,42,1.179,43,2.817,44,3.332,45,0.545,47,1.387,49,0.811,50,2.386,58,0.428,59,0.228,60,1.499,63,1.063,67,0.889,72,0.019,73,0.025,74,0.019,95,1.66,104,1.555,105,1.828,116,1.828,129,2.269,150,1.515,151,2.023,152,2.946,153,5.461,154,3.543,155,3.931,156,3.543,157,0.542,158,3.118,159,3.543,160,3.846,161,3.282,162,1.807,163,3.543,164,0.889,165,5.151,166,3.543,167,3.543]],["title/controllers/AuthController.html",[0,1.474,168,2.004]],["body/controllers/AuthController.html",[0,2.113,2,1.284,3,0.331,4,0.29,5,0.213,7,1.037,9,0.419,10,1.516,14,2.003,15,0.035,18,2.217,20,3.533,22,1.066,26,1.516,27,0.889,28,1.388,30,1.564,31,1.066,33,1.659,45,0.569,47,1.471,49,0.627,53,3.984,54,1.284,58,0.331,59,0.177,60,1.066,61,1.553,63,1.164,65,2.52,67,0.974,72,0.015,73,0.021,74,0.015,129,1.516,157,0.594,162,1.516,164,0.974,168,2.474,169,2.277,170,2.277,171,2.739,172,2.575,173,2.1,174,3.601,175,3.228,176,2.739,177,2.672,178,2.739,179,4.906,180,3.882,181,4.906,182,3.882,183,4.906,184,4.906,185,2.739,186,3.533,187,2.474,188,3.126,189,4.078,190,4.906,191,2.298,192,3.533,193,2.096,194,2.739,195,2.427,196,2.739,197,5.379,198,2.739,199,2.474,200,2.739,201,2.277,202,2.427,203,1.564,204,2.277,205,1.973,206,2.739,207,1.746,208,2.739,209,2.739,210,0.897,211,2.739,212,2.796,213,2.739,214,2.299,215,2.739,216,3.882,217,2.739,218,2.739,219,2.739]],["title/modules/AuthModule.html",[36,0.655,86,1.796]],["body/modules/AuthModule.html",[2,2.111,3,0.411,4,0.36,5,0.264,15,0.035,36,1.052,45,0.637,49,0.779,56,1.943,58,0.411,59,0.219,67,0.854,72,0.018,73,0.024,74,0.018,76,1.454,77,1.454,78,1.943,79,1.943,80,1.943,81,2.366,82,2.324,86,3.523,87,3.023,88,2.964,90,2.572,91,1.943,92,1.594,94,3.218,103,2.829,104,1.475,105,1.755,107,2.829,116,1.755,117,2.168,168,3.218,173,1.329,202,2.692,204,2.829,220,2.829,221,3.403,222,2.829,223,3.28,224,3.403,225,3.403,226,2.168,227,3.403,228,3.403,229,3.403,230,4.505,231,4.505,232,2.572,233,3.403,234,2.829,235,2.829,236,3.403,237,4.505,238,3.403,239,3.403]],["title/injectables/AuthService.html",[150,1.03,202,1.474]],["body/injectables/AuthService.html",[3,0.249,4,0.218,5,0.16,7,0.651,9,0.315,10,1.229,15,0.035,22,1.264,26,1.67,27,0.979,28,1.528,30,2.181,31,1.333,33,1.632,42,1.301,45,0.514,47,1.515,49,0.472,58,0.38,59,0.133,60,1.174,61,1.601,63,1.456,67,1.073,72,0.011,73,0.017,74,0.011,104,1.465,105,1.063,126,2.751,129,1.896,131,0.566,150,1.031,151,1.177,157,0.743,162,2.085,164,1.155,172,1.797,173,1.896,174,2.006,177,2.376,186,1.484,191,2.074,192,1.484,193,2.074,199,1.313,202,1.475,203,1.177,205,1.484,207,1.313,210,1.654,214,0.966,226,1.313,232,2.441,240,1.484,241,1.229,242,3.175,243,3.175,244,3.148,245,3.148,246,2.061,247,4.33,248,3.148,249,2.061,250,2.074,251,2.061,252,2.267,253,2.617,254,3.162,255,2.617,256,2.617,257,2.061,258,2.617,259,3.751,260,3.923,261,3.175,262,3.175,263,2.617,264,2.617,265,2.061,266,2.617,267,1.229,268,2.006,269,1.624,270,3.175,271,2.617,272,2.751,273,2.267,274,1.713,275,1.313,276,1.313,277,1.713,278,0.517,279,3.175,280,2.617,281,1.484,282,2.617,283,1.713,284,2.006,285,1.125,286,1.624,287,1.624,288,1.713,289,1.713,290,1.713,291,1.713,292,3.829,293,1.713,294,3.175,295,3.317,296,2.617,297,2.267,298,3.175,299,2.181,300,1.713,301,1.484,302,1.713,303,1.713,304,1.713,305,1.713,306,0.966,307,1.177,308,1.313,309,1.713]],["title/modules/ConfigModule.html",[36,0.655,87,1.623]],["body/modules/ConfigModule.html",[3,0.517,4,0.453,5,0.332,15,0.034,36,1.17,45,0.551,49,0.979,58,0.517,59,0.276,72,0.023,73,0.028,74,0.023,76,1.828,77,1.828,78,2.443,79,2.443,80,2.443,81,2.441,82,2.898,87,3.092,90,2.975,91,2.443,92,2.004,104,1.71,131,1.174,310,3.556,311,3.556,312,4.278,313,4.278,314,3.556,315,4.278,316,4.278]],["title/classes/ConfigService.html",[59,0.203,104,0.863]],["body/classes/ConfigService.html",[3,0.285,4,0.25,5,0.422,7,0.594,9,0.362,10,1.362,15,0.035,22,1.341,24,1.799,26,1.788,27,1.048,28,1.637,31,1.49,39,3.303,40,1.799,41,2.368,42,1.385,43,2.362,45,0.439,47,1.373,58,0.421,59,0.152,60,1.138,63,1.244,65,1.107,67,1.04,72,0.013,73,0.019,74,0.013,104,0.957,129,1.362,131,0.648,137,2.986,157,0.748,158,3.264,161,1.505,162,1.996,164,1.04,187,1.505,241,1.362,267,1.788,278,0.593,306,1.107,317,1.349,318,1.701,319,3.835,320,3.488,321,2.986,322,3.488,323,2.899,324,3.488,325,2.899,326,3.909,327,2.899,328,2.899,329,2.919,330,2.899,331,2.362,332,3.909,333,2.512,334,2.918,335,1.799,336,2.899,337,2.362,338,2.512,339,3.298,340,2.918,341,2.899,342,2.986,343,3.447,344,2.899,345,2.362,346,2.899,347,2.899,348,3.806,349,2.899,350,2.512,351,2.899,352,1.634,353,2.899,354,1.964,355,1.701,356,2.899,357,1.701,358,2.899,359,1.701,360,1.964,361,1.964,362,1.964,363,1.349,364,1.964,365,1.964,366,1.964,367,1.964,368,1.701,369,1.964,370,1.701,371,1.964,372,1.964,373,1.964,374,1.701,375,1.701,376,1.964,377,1.701,378,1.964,379,1.701,380,1.964,381,1.505,382,2.512,383,1.964,384,2.899,385,1.964,386,1.964,387,1.964,388,1.964,389,1.964]],["title/interfaces/EnvConfig.html",[278,0.789,319,2.004]],["body/interfaces/EnvConfig.html",[3,0.347,4,0.304,5,0.41,7,0.49,15,0.035,22,0.789,24,1.483,31,1.376,39,3.119,40,1.483,41,2.293,42,1.385,43,2.072,45,0.49,47,1.503,58,0.485,59,0.185,60,0.789,63,0.862,65,1.347,67,1.161,72,0.015,73,0.022,74,0.015,104,0.789,129,1.123,131,0.789,137,3.334,158,3.119,161,1.832,162,1.568,164,1.161,187,1.832,267,1.568,278,0.721,306,1.347,318,2.07,319,3.792,321,2.07,323,2.39,325,2.39,326,3.609,327,2.39,328,2.39,329,2.643,330,2.39,332,4.038,333,2.07,334,3.194,335,1.483,336,2.39,338,2.07,339,2.893,340,2.559,341,2.39,342,2.893,343,3.339,344,2.39,346,2.39,347,2.39,348,3.339,349,2.39,350,2.07,351,2.39,352,1.347,353,2.39,354,2.39,355,2.07,356,3.339,357,2.07,358,3.339,359,2.893,360,2.39,361,2.39,362,2.39,363,1.641,364,2.39,365,2.39,366,2.39,367,2.39,368,2.07,369,2.39,370,2.07,371,2.39,372,2.39,373,2.39,374,2.07,375,2.07,376,2.39,377,2.07,378,2.39,379,2.07,380,2.39,381,1.832,382,2.893,383,2.39,384,3.339,385,2.39,386,2.39,387,2.39,388,2.39,389,2.39,390,1.483,391,2.875,392,2.875]],["title/interfaces/IGenericMessageBody.html",[278,0.789,393,1.796]],["body/interfaces/IGenericMessageBody.html",[3,0.274,4,0.24,5,0.176,7,0.386,9,0.347,15,0.035,17,1.443,21,1.443,24,2.086,27,0.518,31,1.381,33,1.728,42,1.327,45,0.58,46,2.153,47,1.608,49,0.518,58,0.408,59,0.146,60,0.928,61,0.679,63,0.679,65,1.583,67,1.375,72,0.012,73,0.018,74,0.012,102,1.293,113,1.168,129,0.884,131,1.231,150,1.106,157,0.347,162,0.884,164,1.125,173,1.32,188,1.443,191,2.15,193,2.45,195,2.101,210,1.931,212,1.63,214,1.583,241,1.32,250,0.967,267,0.884,268,1.443,269,1.743,275,2.153,276,2.153,278,0.568,285,2.124,287,1.168,299,1.93,306,1.895,307,1.93,308,1.443,335,1.168,390,1.168,393,1.93,394,1.63,395,2.809,396,3.361,397,3.361,398,4.335,399,2.434,400,2.153,401,3.361,402,1.293,403,1.882,404,2.912,405,2.809,406,1.443,407,1.882,408,1.443,409,1.882,410,2.086,411,1.63,412,2.809,413,1.882,414,1.63,415,1.882,416,2.912,417,3.207,418,1.882,419,1.882,420,1.882,421,1.882,422,2.434,423,1.882,424,2.248,425,1.882,426,2.809,427,1.882,428,2.809,429,1.882,430,1.882,431,2.809,432,1.882,433,1.882,434,1.882,435,1.63,436,1.882,437,1.63,438,2.809,439,1.63,440,1.882,441,1.882,442,1.63,443,1.882,444,1.63,445,1.882,446,1.882,447,1.882,448,1.882,449,1.63,450,1.882,451,1.882,452,1.882,453,1.882,454,1.882,455,1.882,456,1.882,457,1.63,458,1.63,459,1.882,460,1.882,461,1.882,462,1.882,463,1.882,464,1.63,465,1.882,466,1.63,467,1.882,468,1.882,469,1.882,470,1.63,471,1.882]],["title/interfaces/IProfile.html",[250,1.344,278,0.789]],["body/interfaces/IProfile.html",[3,0.363,4,0.318,5,0.234,7,0.513,9,0.46,15,0.035,27,1.299,42,1.441,45,0.439,58,0.501,63,1.703,72,0.016,73,0.022,74,0.016,113,2.928,121,2.765,131,0.825,157,0.943,164,0.754,210,1.673,241,1.618,250,1.77,278,0.754,284,3.256,285,2.029,286,2.928,287,2.765,352,1.409,363,2.707,390,1.551,400,2.641,402,2.918,408,3.256,414,2.985,424,2.66,472,2.166,473,4.456,474,2.985,475,4.988,476,4.741,477,3.007,478,2.765,479,2.5]],["title/interfaces/ITokenReturnBody.html",[203,1.796,278,0.789]],["body/interfaces/ITokenReturnBody.html",[3,0.281,4,0.246,5,0.181,7,0.396,9,0.356,15,0.035,30,2.346,31,1.128,33,1.755,42,1.356,45,0.538,47,1.578,49,0.532,58,0.417,59,0.15,60,0.946,61,1.455,63,1.363,67,1.217,72,0.012,73,0.019,74,0.012,104,1.332,105,1.199,126,2.959,129,1.604,131,0.638,150,1.129,157,0.695,162,1.895,164,1.217,172,1.328,173,1.346,174,1.482,177,2.119,186,2.483,191,1.755,192,1.675,193,1.941,199,1.482,202,1.089,203,1.968,205,1.675,207,1.482,210,1.488,214,1.089,226,1.482,232,1.968,240,1.675,241,1.346,242,1.933,243,1.933,247,4.034,250,1.755,252,1.675,253,1.933,254,3.327,255,1.933,256,1.933,258,1.933,259,3.272,260,3.975,261,3.415,262,3.415,263,1.933,264,1.933,266,1.933,267,0.908,268,1.482,269,1.199,270,2.866,271,1.933,272,2.959,273,2.483,274,1.933,275,2.197,276,2.197,277,2.866,278,0.583,279,4.373,280,4.034,281,2.483,282,2.866,283,1.933,284,2.197,285,1.232,286,1.778,287,1.778,288,1.933,289,1.933,290,1.933,291,1.933,292,4.034,293,1.933,294,3.415,295,3.495,296,2.866,297,2.483,298,3.415,299,2.346,300,1.933,301,1.675,302,1.933,303,1.933,304,1.933,305,1.933,306,1.089,307,1.328,308,1.482,309,1.933,390,1.199]],["title/injectables/JwtStrategy.html",[150,1.03,223,1.796]],["body/injectables/JwtStrategy.html",[3,0.389,4,0.341,5,0.25,7,0.74,9,0.493,10,1.696,15,0.035,18,2.48,22,1.192,26,1.696,27,0.994,28,1.552,31,1.192,33,1.855,35,2.32,45,0.581,47,1.577,49,0.737,56,1.839,58,0.389,59,0.317,60,1.443,61,1.786,63,1.302,72,0.017,73,0.023,74,0.017,104,1.613,105,1.661,150,1.422,151,1.839,157,0.665,162,1.258,164,0.808,173,1.919,187,3.498,193,2.099,207,2.053,223,2.48,232,3.229,235,2.678,254,3.301,267,1.696,273,2.32,281,3.128,284,2.053,338,3.128,382,2.32,474,2.32,480,2.678,481,4.913,482,3.221,483,3.221,484,3.221,485,5.656,486,5.258,487,3.221,488,4.343,489,4.343,490,4.343,491,3.221,492,3.221,493,3.221,494,3.221,495,3.221,496,3.221,497,3.221,498,3.221,499,3.221,500,2.32,501,4.343,502,4.343,503,4.343]],["title/classes/LoginPayload.html",[59,0.203,177,1.623]],["body/classes/LoginPayload.html",[3,0.477,4,0.418,5,0.307,7,0.673,9,0.604,14,2.557,15,0.035,22,1.361,42,1.301,45,0.525,54,1.849,58,0.477,59,0.367,72,0.021,73,0.027,74,0.021,121,2.557,157,0.759,174,3.159,177,2.557,241,1.936,285,2.094,317,2.253,424,2.744,478,2.557,504,3.281,505,4.957,506,3.57,507,3.281,508,3.946,509,4.094,510,2.842,511,3.946,512,3.903,513,3.57,514,3.903,515,2.842,516,2.515,517,2.842]],["title/classes/PatchProfilePayload.html",[59,0.203,410,1.623]],["body/classes/PatchProfilePayload.html",[3,0.425,4,0.372,5,0.274,7,0.6,9,0.539,14,2.81,15,0.035,22,1.495,27,1.294,42,1.372,45,0.487,54,1.649,58,0.425,59,0.351,72,0.019,73,0.025,74,0.019,121,1.816,157,0.834,191,1.968,210,1.508,241,1.799,285,2.021,286,2.916,317,2.01,340,2.243,410,2.376,424,2.649,478,1.816,506,2.535,509,4.317,510,2.535,512,4.072,513,3.318,514,4.177,515,2.535,516,2.243,517,2.535,518,2.926,519,3.83,520,3.52,521,3.52,522,3.52,523,3.83,524,3.83,525,3.52,526,3.52,527,3.52,528,3.52,529,3.83,530,2.926]],["title/controllers/ProfileController.html",[0,1.474,531,2.004]],["body/controllers/ProfileController.html",[0,1.899,2,1.065,3,0.275,4,0.241,5,0.177,7,1.006,9,0.348,10,1.324,11,2.818,14,2.091,15,0.035,17,3.212,18,3.277,19,3.37,20,3.63,21,3.212,22,1.113,26,1.583,27,0.928,28,1.449,30,1.298,31,1.384,42,1.195,45,0.553,46,3.559,47,1.441,48,1.89,49,0.52,52,2.818,53,3.761,54,1.065,55,1.89,56,1.298,58,0.275,59,0.147,60,0.624,61,1.348,62,1.89,63,0.682,64,3.37,65,2.362,66,3.37,67,1.017,72,0.012,73,0.018,74,0.012,110,1.449,111,1.637,112,1.637,131,0.624,157,0.62,164,0.57,170,1.89,173,2.142,191,1.732,193,2.231,195,1.065,201,1.89,210,2.057,214,1.899,250,0.971,267,1.324,269,1.749,285,2.026,306,1.065,335,1.749,393,1.298,404,2.441,406,1.449,410,2.318,411,1.637,416,2.441,417,2.863,457,2.441,458,2.441,466,1.637,470,2.441,519,4.19,531,2.16,532,1.89,533,2.273,534,3.39,535,2.273,536,2.273,537,4.493,538,3.736,539,4.493,540,3.39,541,2.273,542,3.39,543,3.39,544,2.273,545,2.273,546,5.041,547,2.273,548,3.39,549,2.818,550,2.273,551,2.273,552,3.39,553,2.273,554,3.39,555,4.054,556,1.89,557,2.273,558,2.273,559,2.273,560,2.273,561,2.273,562,1.89,563,3.39,564,2.273,565,2.273,566,2.273,567,2.273,568,2.273]],["title/modules/ProfileModule.html",[36,0.655,88,1.623]],["body/modules/ProfileModule.html",[2,2.34,3,0.483,4,0.423,5,0.31,15,0.034,27,0.914,36,1.135,45,0.622,49,0.914,58,0.483,59,0.258,61,1.893,72,0.021,73,0.027,74,0.021,76,1.707,77,1.707,78,2.281,79,2.281,80,2.281,81,2.553,82,2.811,88,3.137,90,2.852,91,2.281,92,1.872,94,2.546,100,3.321,102,2.281,210,1.784,363,2.281,406,2.546,531,3.473,556,3.321,569,3.321,570,3.321,571,3.321,572,3.995,573,3.995,574,3.995]],["title/injectables/ProfileService.html",[61,0.943,150,1.03]],["body/injectables/ProfileService.html",[3,0.227,4,0.199,5,0.146,7,0.499,9,0.287,10,1.144,15,0.035,17,1.197,21,1.197,22,1.341,24,2.412,26,1.908,27,1.157,28,1.746,31,1.509,33,1.539,42,1.36,45,0.549,46,2.812,47,1.515,49,0.43,58,0.354,59,0.121,60,1.117,61,0.879,63,0.563,65,0.88,67,1.268,72,0.01,73,0.016,74,0.01,102,1.072,113,0.969,129,1.144,131,1.117,150,0.959,151,1.072,157,0.748,162,0.733,164,1.021,173,1.826,188,2.594,191,2.218,193,2.494,195,2.289,210,2,212,2.11,214,1.373,250,0.802,267,1.144,268,1.197,269,2.099,275,1.197,276,1.197,278,0.471,285,2.135,287,0.969,299,1.673,306,1.688,307,1.673,308,1.197,335,1.511,393,1.072,394,1.352,395,1.561,396,2.995,397,2.995,398,2.995,399,2.11,400,1.867,401,3.669,402,1.072,403,1.561,404,2.595,405,2.436,406,1.197,407,1.561,408,1.197,409,1.561,410,2.277,411,1.352,412,2.995,413,1.561,414,2.11,415,2.436,416,3.368,417,3.502,418,2.436,419,1.561,420,2.436,421,1.561,422,2.11,423,2.436,424,2.368,425,2.436,426,2.436,427,1.561,428,2.436,429,1.561,430,2.436,431,2.995,432,2.436,433,1.561,434,1.561,435,1.352,436,1.561,437,1.352,438,2.436,439,1.352,440,1.561,441,1.561,442,1.352,443,1.561,444,1.352,445,1.561,446,1.561,447,1.561,448,1.561,449,1.352,450,1.561,451,1.561,452,1.561,453,1.561,454,1.561,455,1.561,456,1.561,457,2.931,458,2.11,459,2.436,460,1.561,461,1.561,462,1.561,463,1.561,464,1.352,465,1.561,466,2.11,467,1.561,468,1.561,469,1.561,470,1.352,471,1.561,575,2.93,576,2.93,577,1.878,578,1.878,579,1.878,580,1.878,581,1.878,582,1.878,583,1.878,584,1.878]],["title/classes/RegisterPayload.html",[59,0.203,195,1.474]],["body/classes/RegisterPayload.html",[3,0.416,4,0.365,5,0.268,7,0.587,9,0.527,14,2.786,15,0.035,22,1.483,27,1.285,42,1.366,45,0.481,54,1.615,58,0.416,59,0.348,72,0.019,73,0.024,74,0.019,121,2.786,157,0.827,175,3.776,191,1.941,195,2.128,241,1.774,285,2.007,286,2.896,317,1.967,340,2.196,424,2.631,478,2.786,506,3.891,507,2.865,509,4.297,510,2.482,512,4.044,513,3.272,514,4.153,515,2.482,516,2.196,517,2.482,523,3.776,524,3.776,529,3.776,530,2.865,585,2.865,586,3.446,587,3.446,588,3.446,589,3.446,590,3.446,591,3.446]],["title/modules/WinstonModule.html",[36,0.655,89,1.796]],["body/modules/WinstonModule.html",[3,0.425,4,0.372,5,0.274,10,1.375,15,0.035,22,1.264,26,1.799,27,1.054,28,1.647,31,1.264,36,1.262,45,0.543,47,1.382,49,0.806,58,0.425,59,0.227,60,1.495,67,1.156,72,0.019,73,0.025,74,0.019,76,1.504,81,2.718,82,2.376,89,3.11,94,2.243,95,2.406,157,0.705,164,1.156,321,3.923,381,2.243,592,3.52,593,3.52,594,4.607,595,3.471,596,3.52,597,4.607,598,3.228,599,5.653,600,4.607,601,3.52,602,3.11,603,3.52,604,3.83,605,4.607,606,3.52,607,2.535,608,2.535,609,3.52,610,4.607,611,3.52,612,3.52,613,3.52]],["title/interfaces/WinstonModuleAsyncOptions.html",[278,0.789,602,1.796]],["body/interfaces/WinstonModuleAsyncOptions.html",[3,0.468,4,0.41,5,0.301,7,0.66,9,0.593,15,0.035,28,1.751,31,1.344,36,1.175,45,0.518,58,0.592,72,0.021,73,0.026,74,0.021,81,2.295,95,2.729,116,3.068,117,3.597,155,2.467,157,0.822,193,1.654,241,1.912,278,0.971,352,2.295,390,1.997,474,3.527,500,3.527,595,3.121,598,3.325,602,2.796,604,4.071,614,2.788,615,4.897,616,4.897,617,4.897,618,3.871,619,3.871,620,3.527,621,3.871]],["title/coverage.html",[622,3.078]],["body/coverage.html",[0,2.272,1,2.001,5,0.244,6,2.611,15,0.035,36,0.654,40,3.198,50,1.62,59,0.336,61,0.942,72,0.017,73,0.023,74,0.017,104,0.862,113,1.62,131,0.862,150,1.704,152,2.611,157,0.481,168,2.001,169,2.611,177,1.62,195,1.471,202,1.471,203,1.793,210,1.028,223,1.793,240,3.074,250,1.342,278,1.365,318,3.074,319,2.001,393,1.793,394,3.074,410,1.62,472,3.074,480,2.611,504,2.611,518,2.611,531,2.001,532,2.611,585,2.611,602,1.793,607,2.262,608,2.262,614,2.262,622,2.262,623,2.262,624,2.611,625,3.14,626,2.611,627,5.346,628,6.226,629,5.613,630,2.262,631,4.269,632,4.269,633,4.269,634,3.14,635,3.14,636,3.14,637,3.549,638,2.611,639,2.611,640,3.549,641,4.774,642,2.611,643,2.611,644,2.611,645,2.611,646,2.611,647,2.611,648,2.611,649,2.611,650,2.611,651,3.14,652,3.14]],["title/dependencies.html",[77,1.614,653,2.636]],["body/dependencies.html",[5,0.29,15,0.035,25,3.101,35,3.444,49,0.854,54,1.748,56,2.13,57,3.364,59,0.308,72,0.02,73,0.026,74,0.02,77,1.593,95,2.241,97,3.101,98,3.101,102,2.13,110,2.377,111,2.686,112,2.686,226,2.377,232,2.13,355,2.686,357,2.686,399,2.686,400,2.377,402,2.13,516,2.377,654,3.73,655,5.568,656,3.73,657,3.73,658,3.73,659,3.73,660,3.976,661,4.629,662,3.73,663,3.73,664,3.73,665,3.73,666,3.73,667,3.73,668,3.73,669,3.73,670,3.976,671,3.976,672,3.73,673,3.101,674,3.73,675,3.73,676,3.976,677,3.73,678,3.73,679,3.73,680,3.73,681,3.73,682,3.73,683,3.73,684,3.73,685,3.73,686,3.73,687,3.73,688,3.73,689,3.73,690,3.73,691,2.686,692,3.73,693,3.101,694,3.73,695,3.73,696,3.73]],["title/miscellaneous/enumerations.html",[697,1.36,698,3.141]],["body/miscellaneous/enumerations.html",[9,0.736,15,0.033,72,0.026,73,0.03,74,0.026,334,3.559,352,2.617,408,3.559,442,4.023,630,3.463,697,2.48,698,3.997,699,3.997]],["title/index.html",[9,0.404,700,2.192,701,2.192]],["body/index.html",[4,0.189,5,0.271,7,0.304,8,3.576,15,0.034,36,0.897,39,1.99,40,0.92,41,1.018,42,0.644,43,2.221,44,2.51,45,0.456,57,3.4,72,0.01,73,0.015,74,0.01,75,1.018,77,2.047,92,1.633,95,1.318,104,0.772,110,2.916,116,0.92,131,0.489,155,1.793,157,0.273,158,2.459,160,1.482,161,1.136,164,0.706,172,1.018,188,1.136,189,1.482,199,1.793,214,1.318,234,1.482,252,1.284,254,1.018,259,1.284,260,2.026,269,0.92,272,1.284,295,1.284,297,1.284,299,1.606,301,1.284,307,2.459,326,1.284,329,1.018,332,1.284,339,1.284,342,2.849,352,1.318,359,1.284,368,1.284,370,1.284,375,1.284,377,1.284,379,1.284,422,2.51,437,2.026,439,1.284,444,1.284,464,1.284,478,1.451,562,3.289,598,1.606,622,2.026,623,2.026,627,2.897,660,2.897,661,4.633,670,3.289,671,3.58,673,3.289,676,2.897,691,1.284,693,2.897,702,1.783,703,1.783,704,3.956,705,2.813,706,1.783,707,1.783,708,1.783,709,1.783,710,2.813,711,1.783,712,1.783,713,2.813,714,1.783,715,3.956,716,2.813,717,2.813,718,1.783,719,1.783,720,4.306,721,3.484,722,1.783,723,1.783,724,3.484,725,1.783,726,1.783,727,1.783,728,5.573,729,3.484,730,3.484,731,3.956,732,1.783,733,2.813,734,2.813,735,1.783,736,1.783,737,1.783,738,1.783,739,1.482,740,1.482,741,3.289,742,1.783,743,3.484,744,1.783,745,2.813,746,1.783,747,1.783,748,3.484,749,2.813,750,3.982,751,1.783,752,2.813,753,1.783,754,3.484,755,1.783,756,1.783,757,3.484,758,1.482,759,3.956,760,1.783,761,1.783,762,4.306,763,2.813,764,1.783,765,1.783,766,1.783,767,1.783,768,2.813,769,1.783,770,5.231,771,3.956,772,3.484,773,1.783,774,3.484,775,4.79,776,2.813,777,1.783,778,2.813,779,2.813,780,1.783,781,1.783,782,1.783,783,1.783,784,1.783,785,1.783,786,1.783,787,1.783,788,2.813,789,3.484,790,1.783,791,1.783,792,1.783,793,1.783,794,1.783,795,1.783,796,1.783,797,2.813,798,1.783,799,1.783,800,1.783,801,1.783,802,1.783,803,1.783,804,1.783,805,2.897,806,1.783,807,1.783,808,1.783,809,1.783,810,1.783,811,1.783,812,1.783,813,1.783,814,1.783,815,1.783,816,1.783,817,1.783,818,1.783,819,1.783,820,2.813,821,1.783,822,2.51,823,1.783,824,1.783,825,1.783,826,2.813,827,2.813,828,1.783,829,2.813,830,1.783,831,1.783,832,1.783,833,2.813,834,1.783,835,2.813,836,1.783,837,1.783,838,2.813,839,1.783,840,1.783,841,2.813,842,1.783,843,2.813,844,1.783,845,1.783,846,1.783,847,2.813,848,1.783,849,1.783,850,1.783,851,1.783,852,1.783,853,2.897,854,1.783,855,1.783,856,1.783,857,1.783,858,1.783,859,1.783,860,1.783,861,1.783,862,1.783,863,1.783,864,2.813,865,2.813,866,2.813,867,1.783,868,1.783,869,1.783,870,1.783,871,2.813,872,3.956,873,3.956,874,2.813,875,2.813,876,1.783,877,1.783,878,1.783,879,3.484,880,1.783,881,1.783,882,3.484,883,1.783,884,1.783,885,1.783,886,1.783,887,1.783,888,1.783,889,1.783,890,1.783,891,1.482,892,1.783,893,1.783,894,1.783,895,2.897,896,2.339,897,1.783,898,1.783,899,1.783,900,1.783,901,1.783,902,1.783,903,1.783,904,1.783,905,1.783,906,1.783,907,1.783,908,1.783,909,1.783,910,1.783,911,1.783,912,1.783,913,1.783,914,1.783,915,1.783,916,1.783,917,2.339,918,2.813,919,1.783,920,1.783,921,1.783,922,1.783,923,1.783,924,1.783,925,1.783,926,1.783,927,1.783,928,1.284,929,1.783]],["title/license.html",[700,2.192,701,2.192,928,1.899]],["body/license.html",[15,0.026,57,2.491,72,0.021,73,0.026,74,0.021,92,1.831,267,1.526,333,2.815,350,3.548,435,2.815,538,3.249,549,3.249,623,2.815,739,3.249,740,3.249,741,3.249,758,4.485,822,3.548,891,3.249,917,4.096,928,2.815,930,5.395,931,3.908,932,3.908,933,3.908,934,4.927,935,3.908,936,3.908,937,3.908,938,3.908,939,3.908,940,3.908,941,4.927,942,6.179,943,3.908,944,3.908,945,3.908,946,3.908,947,3.908,948,3.908,949,3.908,950,3.908,951,3.908,952,3.908,953,4.927,954,3.908,955,3.908,956,3.908,957,3.908,958,3.908,959,3.908,960,4.927,961,4.927,962,3.908,963,3.908,964,3.908,965,3.908,966,3.908,967,3.908,968,3.908,969,3.908,970,3.908,971,3.908,972,3.908,973,3.908,974,3.908,975,3.908,976,3.908,977,3.908,978,3.908,979,3.908,980,3.908,981,3.908,982,3.908,983,3.908,984,3.908,985,3.908]],["title/modules.html",[76,1.826]],["body/modules.html",[15,0.029,72,0.025,73,0.029,74,0.025,75,2.666,76,1.995,86,2.666,87,2.409,88,2.409,89,2.666,853,5.005,986,6.02,987,6.02,988,6.139,989,4.67,990,4.67]],["title/overview.html",[991,3.553]],["body/overview.html",[2,1.793,15,0.034,36,0.797,50,2.756,61,1.807,72,0.021,73,0.026,74,0.021,75,3.583,76,1.635,77,1.635,78,2.185,79,2.185,80,2.185,81,1.793,82,1.973,83,3.181,84,3.181,85,3.181,86,3.564,87,2.993,88,3.108,89,3.05,90,2.775,91,2.185,92,1.793,104,1.543,151,2.185,202,2.503,220,3.181,222,3.181,223,3.05,310,3.181,311,3.181,317,2.185,390,1.973,569,3.181,570,3.181,571,3.181,991,3.181,992,4.861,993,3.826,994,4.861]],["title/miscellaneous/typealiases.html",[697,1.36,995,3.778]],["body/miscellaneous/typealiases.html",[9,0.745,15,0.03,72,0.026,73,0.03,74,0.026,155,3.1,157,0.745,595,3.584,598,2.778,614,3.504,620,3.504,697,2.51,996,4.865,997,4.865]],["title/miscellaneous/variables.html",[329,2.157,697,1.36]],["body/miscellaneous/variables.html",[7,0.622,8,3.094,9,0.384,15,0.035,18,1.434,27,0.835,36,0.894,42,1.364,43,1.295,60,1.001,67,0.915,72,0.013,73,0.02,74,0.013,95,2.209,113,2.432,116,1.882,117,2.737,121,2.583,131,1.179,157,0.938,158,2.083,164,0.915,172,1.434,173,0.981,210,1.407,254,1.434,285,0.898,286,1.295,287,1.295,314,3.571,329,1.434,334,3.797,335,1.295,352,2.83,363,2.083,374,1.809,381,1.6,402,1.434,417,1.6,424,1.177,449,1.809,472,1.809,473,3.032,475,3.032,478,2.583,479,2.088,500,1.809,595,2.325,598,2.453,602,1.434,607,2.627,608,2.627,620,1.809,624,2.088,626,2.088,630,1.809,637,2.088,638,3.919,639,3.919,640,2.088,641,2.088,642,3.571,643,3.571,644,3.032,645,3.032,646,3.032,647,3.032,648,3.032,649,2.088,650,3.032,691,1.809,697,1.295,699,2.088,750,2.088,805,3.571,822,1.809,895,3.032,896,4.59,998,2.511,999,3.648,1000,2.511,1001,2.511,1002,5.39,1003,3.648,1004,2.511,1005,2.511,1006,2.511,1007,2.511,1008,2.511,1009,2.511,1010,2.511,1011,2.511,1012,2.511,1013,2.511,1014,2.511,1015,5.007,1016,2.511,1017,2.511,1018,3.648,1019,3.648,1020,2.511,1021,2.511,1022,3.648,1023,2.511,1024,2.511,1025,2.511,1026,2.511,1027,2.511,1028,2.511,1029,2.511,1030,2.511,1031,2.511,1032,2.511,1033,2.511,1034,2.511,1035,2.511,1036,2.511]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["0.1.13",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["0.10.1",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["0.2.19",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["1.0",{"_index":1026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.1",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["1.19.2",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["1.8.0",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":627,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["14d",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["16.1.4",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["2.0.1",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":636,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["201",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["2018",{"_index":932,"title":{},"body":{"license.html":{}}}],["20m",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["2400",{"_index":811,"title":{},"body":{"index.html":{}}}],["3",{"_index":993,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["4",{"_index":994,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":632,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":812,"title":{},"body":{"index.html":{}}}],["400",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["401",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":454,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["5",{"_index":992,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["5.7.1",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["6.1.0",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["6.1.2",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":631,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["8.1.0",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["8080",{"_index":893,"title":{},"body":{"index.html":{}}}],["9/9",{"_index":634,"title":{},"body":{"coverage.html":{}}}],["9000",{"_index":780,"title":{},"body":{"index.html":{}}}],["_id",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["above",{"_index":959,"title":{},"body":{"license.html":{}}}],["abstraction",{"_index":907,"title":{},"body":{"index.html":{}}}],["access",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProfileController.html":{},"dependencies.html":{}}}],["accesscontrolmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["accesscontrolmodule.forroles(roles",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["account",{"_index":434,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["acguard",{"_index":554,"title":{},"body":{"controllers/ProfileController.html":{}}}],["acguard)@useroles({resource",{"_index":536,"title":{},"body":{"controllers/ProfileController.html":{}}}],["action",{"_index":538,"title":{},"body":{"controllers/ProfileController.html":{},"license.html":{}}}],["acts",{"_index":906,"title":{},"body":{"index.html":{}}}],["addbearerauth(swagger_api_auth_name",{"_index":1010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin",{"_index":442,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"miscellaneous/enumerations.html":{}}}],["again",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["against",{"_index":364,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["aliases",{"_index":996,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":808,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":922,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":951,"title":{},"body":{"license.html":{}}}],["angular",{"_index":713,"title":{},"body":{"index.html":{}}}],["another",{"_index":438,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["any'})@apiresponse({status",{"_index":540,"title":{},"body":{"controllers/ProfileController.html":{}}}],["api",{"_index":896,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api/auth",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/docs",{"_index":1030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/profile",{"_index":533,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apibearerauth",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["apimodelproperty",{"_index":512,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["apimodelproperty()@isemail()@isnotempty",{"_index":520,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["apimodelproperty()@isnotempty()@minlength(8",{"_index":526,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["apimodelproperty()@matches(/^[a",{"_index":522,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["apimodelproperty({required",{"_index":506,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["apiresponse",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["apis",{"_index":900,"title":{},"body":{"index.html":{}}}],["apiusetags",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["apiusetags(\"authentication",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiusetags(\"profile",{"_index":557,"title":{},"body":{"controllers/ProfileController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["app.register(fastifyratelimiter",{"_index":840,"title":{},"body":{"index.html":{}}}],["app.register(headers",{"_index":839,"title":{},"body":{"index.html":{}}}],["app.roles",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.use",{"_index":846,"title":{},"body":{"index.html":{}}}],["app.use(headers",{"_index":845,"title":{},"body":{"index.html":{}}}],["app/app.roles",{"_index":409,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["app_env",{"_index":368,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["app_url",{"_index":161,"title":{},"body":{"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["applications",{"_index":710,"title":{},"body":{"index.html":{}}}],["applied",{"_index":351,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["appmodule",{"_index":75,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["approles",{"_index":408,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"injectables/ProfileService.html":{},"miscellaneous/enumerations.html":{}}}],["approles.admin",{"_index":455,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["appservice",{"_index":50,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appurl",{"_index":165,"title":{},"body":{"injectables/AppService.html":{}}}],["args",{"_index":621,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["arising",{"_index":984,"title":{},"body":{"license.html":{}}}],["array",{"_index":1032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assign",{"_index":441,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["associated",{"_index":333,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"license.html":{}}}],["async",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["asynchronous",{"_index":604,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["atlas",{"_index":737,"title":{},"body":{"index.html":{}}}],["auth.controller",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":168,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["authentication",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["authmodule",{"_index":86,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":929,"title":{},"body":{"index.html":{}}}],["authorization",{"_index":1025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authors",{"_index":975,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":202,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":440,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["available",{"_index":990,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["backend",{"_index":719,"title":{},"body":{"index.html":{}}}],["backers",{"_index":923,"title":{},"body":{"index.html":{}}}],["bad",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":404,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["base",{"_index":801,"title":{},"body":{"index.html":{}}}],["based",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["basis",{"_index":1014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["being",{"_index":858,"title":{},"body":{"index.html":{}}}],["below",{"_index":754,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":819,"title":{},"body":{"index.html":{}}}],["between",{"_index":826,"title":{},"body":{"index.html":{}}}],["bloated",{"_index":856,"title":{},"body":{"index.html":{}}}],["body",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{}}}],["boilerplate",{"_index":715,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":343,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["bootstrap",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["both",{"_index":749,"title":{},"body":{"index.html":{}}}],["box",{"_index":724,"title":{},"body":{"index.html":{}}}],["browse",{"_index":988,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":986,"title":{},"body":{"modules.html":{}}}],["build",{"_index":1011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":1023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":705,"title":{},"body":{"index.html":{}}}],["c",{"_index":931,"title":{},"body":{"license.html":{}}}],["callback",{"_index":489,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["change",{"_index":825,"title":{},"body":{"index.html":{}}}],["changed",{"_index":821,"title":{},"body":{"index.html":{}}}],["charge",{"_index":938,"title":{},"body":{"license.html":{}}}],["check",{"_index":383,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["checks",{"_index":338,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["choose",{"_index":437,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["choosing",{"_index":816,"title":{},"body":{"index.html":{}}}],["claim",{"_index":978,"title":{},"body":{"license.html":{}}}],["class",{"_index":59,"title":{"classes/ConfigService.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":317,"title":{},"body":{"classes/ConfigService.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{},"overview.html":{}}}],["cloud",{"_index":735,"title":{},"body":{"index.html":{}}}],["cluster",{"_index":736,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":310,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":311,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":569,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_exports",{"_index":570,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":571,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["code",{"_index":829,"title":{},"body":{"index.html":{}}}],["collection",{"_index":814,"title":{},"body":{"index.html":{}}}],["comes",{"_index":720,"title":{},"body":{"index.html":{}}}],["command",{"_index":762,"title":{},"body":{"index.html":{}}}],["completed",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["completed'})@apiresponse({status",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["compose",{"_index":748,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":958,"title":{},"body":{"license.html":{}}}],["config",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["config.service",{"_index":313,"title":{},"body":{"modules/ConfigModule.html":{}}}],["config/config.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["config/config.service",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":87,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":104,"title":{"classes/ConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["configservice(\".env",{"_index":316,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get(\"db_url",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"webtoken_expiration_time",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(\"webtoken_secret_key",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.isenv(\"dev",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.validateinput(config",{"_index":362,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["configuration",{"_index":158,"title":{},"body":{"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":915,"title":{},"body":{"index.html":{}}}],["configureopenapi",{"_index":650,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["conflict",{"_index":781,"title":{},"body":{"index.html":{}}}],["connection",{"_index":739,"title":{},"body":{"index.html":{},"license.html":{}}}],["console",{"_index":838,"title":{},"body":{"index.html":{}}}],["const",{"_index":164,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["constructor(config",{"_index":154,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(configservice",{"_index":482,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(filepath",{"_index":323,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["constructor(jwtservice",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["constructor(profilemodel",{"_index":577,"title":{},"body":{"injectables/ProfileService.html":{}}}],["contain",{"_index":327,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["container",{"_index":787,"title":{},"body":{"index.html":{}}}],["contract",{"_index":981,"title":{},"body":{"license.html":{}}}],["control",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProfileController.html":{},"dependencies.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"coverage.html":{}}}],["controller(\"api/auth",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"api/profile",{"_index":558,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["copies",{"_index":953,"title":{},"body":{"license.html":{}}}],["copy",{"_index":941,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":930,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":622,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cp",{"_index":760,"title":{},"body":{"index.html":{}}}],["create",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["create(payload",{"_index":432,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["created",{"_index":431,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["createdprofile",{"_index":445,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["createdprofile.save",{"_index":456,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["createlogger(loggeropts",{"_index":1019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["createtoken",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["createtoken(undefined",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["createwinstonasyncproviders",{"_index":607,"title":{},"body":{"modules/WinstonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createwinstonasyncproviders(options",{"_index":612,"title":{},"body":{"modules/WinstonModule.html":{}}}],["createwinstonproviders",{"_index":608,"title":{},"body":{"modules/WinstonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createwinstonproviders(options",{"_index":611,"title":{},"body":{"modules/WinstonModule.html":{}}}],["crud",{"_index":396,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["crypto",{"_index":399,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["crypto.createhmac(\"sha256",{"_index":428,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["current",{"_index":1027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currently",{"_index":436,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["d",{"_index":453,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["daily",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["damages",{"_index":979,"title":{},"body":{"license.html":{}}}],["data",{"_index":417,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["databases",{"_index":910,"title":{},"body":{"index.html":{}}}],["date",{"_index":475,"title":{},"body":{"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["date%.log",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["date.now",{"_index":479,"title":{},"body":{"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["datepattern",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["db_url",{"_index":379,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["dd",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["deal",{"_index":943,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":985,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["declaring",{"_index":1035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"classes/RegisterPayload.html":{}}}],["dedicated",{"_index":902,"title":{},"body":{"index.html":{}}}],["default",{"_index":352,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IProfile.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default(\"dev",{"_index":371,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["defaultmeta",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{}}}],["delete",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["delete(\":username",{"_index":566,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(':username')@useguards(undefined",{"_index":535,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(username",{"_index":466,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["deleted",{"_index":470,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["demand",{"_index":884,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":77,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deploying",{"_index":757,"title":{},"body":{"index.html":{}}}],["describe",{"_index":898,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":744,"title":{},"body":{"index.html":{}}}],["detailed",{"_index":832,"title":{},"body":{"index.html":{}}}],["details",{"_index":913,"title":{},"body":{"index.html":{}}}],["determines",{"_index":799,"title":{},"body":{"index.html":{}}}],["dev",{"_index":800,"title":{},"body":{"index.html":{}}}],["development",{"_index":776,"title":{},"body":{"index.html":{}}}],["directory",{"_index":785,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":949,"title":{},"body":{"license.html":{}}}],["docker",{"_index":728,"title":{},"body":{"index.html":{}}}],["docs",{"_index":882,"title":{},"body":{"index.html":{}}}],["document",{"_index":473,"title":{},"body":{"interfaces/IProfile.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":623,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["documentbuilder",{"_index":1005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["done",{"_index":486,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["dotenv",{"_index":355,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"dependencies.html":{}}}],["dto",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["dynamicmodule",{"_index":599,"title":{},"body":{"modules/WinstonModule.html":{}}}],["e2e",{"_index":874,"title":{},"body":{"index.html":{}}}],["each",{"_index":444,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["edit",{"_index":457,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["edit(payload",{"_index":459,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["efficient",{"_index":706,"title":{},"body":{"index.html":{}}}],["email",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{},"miscellaneous/variables.html":{}}}],["encrypt/decrypt",{"_index":806,"title":{},"body":{"index.html":{}}}],["end",{"_index":890,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensures",{"_index":346,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["enumerations",{"_index":698,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":342,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["env.example",{"_index":761,"title":{},"body":{"index.html":{}}}],["envconfig",{"_index":319,"title":{"interfaces/EnvConfig.html":{}},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["environment",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["envvarsschema",{"_index":365,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["envvarsschema.validate",{"_index":385,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error(`config",{"_index":386,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["error.message",{"_index":387,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["especially",{"_index":857,"title":{},"body":{"index.html":{}}}],["event",{"_index":974,"title":{},"body":{"license.html":{}}}],["exec",{"_index":422,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["execute",{"_index":784,"title":{},"body":{"index.html":{}}}],["executing",{"_index":798,"title":{},"body":{"index.html":{}}}],["exist",{"_index":463,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["existing",{"_index":764,"title":{},"body":{"index.html":{}}}],["exists",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["exp",{"_index":502,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["expire",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["expires",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["expiresin",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiresprettyprint",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["export",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["exports",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"overview.html":{}}}],["exposed",{"_index":778,"title":{},"body":{"index.html":{}}}],["express",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{},"index.html":{},"license.html":{}}}],["extends",{"_index":474,"title":{},"body":{"interfaces/IProfile.html":{},"injectables/JwtStrategy.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["extractjwt",{"_index":491,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":496,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["factory",{"_index":617,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["failed",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["false",{"_index":498,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fastify",{"_index":661,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastifyadapter",{"_index":833,"title":{},"body":{"index.html":{}}}],["fastifyratelimiter",{"_index":836,"title":{},"body":{"index.html":{}}}],["features",{"_index":723,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":546,"title":{},"body":{"controllers/ProfileController.html":{}}}],["fetches",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["field",{"_index":509,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["fields",{"_index":430,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["filepath",{"_index":325,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["files",{"_index":891,"title":{},"body":{"index.html":{},"license.html":{}}}],["findone",{"_index":427,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["fitness",{"_index":971,"title":{},"body":{"license.html":{}}}],["folder",{"_index":888,"title":{},"body":{"index.html":{}}}],["follow",{"_index":751,"title":{},"body":{"index.html":{}}}],["following",{"_index":741,"title":{},"body":{"index.html":{},"license.html":{}}}],["format",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["formats",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["forroot",{"_index":593,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forroot(options",{"_index":594,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forrootasync",{"_index":600,"title":{},"body":{"modules/WinstonModule.html":{}}}],["forrootasync(options",{"_index":601,"title":{},"body":{"modules/WinstonModule.html":{}}}],["found",{"_index":562,"title":{},"body":{"controllers/ProfileController.html":{},"index.html":{}}}],["framework",{"_index":704,"title":{},"body":{"index.html":{}}}],["free",{"_index":937,"title":{},"body":{"license.html":{}}}],["front",{"_index":889,"title":{},"body":{"index.html":{}}}],["fs",{"_index":358,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["function",{"_index":616,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["furnished",{"_index":956,"title":{},"body":{"license.html":{}}}],["further",{"_index":912,"title":{},"body":{"index.html":{}}}],["generate",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["generated",{"_index":883,"title":{},"body":{"index.html":{}}}],["get(\":username",{"_index":559,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get(\"request/user",{"_index":69,"title":{},"body":{"controllers/AppController.html":{}}}],["get(':username')@useguards(undefined)@apiresponse({status",{"_index":545,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get('request/user')@useguards(undefined)@apiresponse({status",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["get()@useguards(undefined)@apiresponse({status",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["get(id",{"_index":418,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["get(key",{"_index":330,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["getbyusername",{"_index":575,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyusername(username",{"_index":420,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["getbyusernameandpass",{"_index":576,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getbyusernameandpass(username",{"_index":425,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["getprofile",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["getprofile(@param(\"username",{"_index":560,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofile(@req",{"_index":70,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(username",{"_index":544,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getstring",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":700,"title":{"index.html":{},"license.html":{}},"body":{}}],["github",{"_index":880,"title":{},"body":{"index.html":{}}}],["given",{"_index":335,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":605,"title":{},"body":{"modules/WinstonModule.html":{}}}],["grab",{"_index":738,"title":{},"body":{"index.html":{}}}],["granted",{"_index":936,"title":{},"body":{"license.html":{}}}],["graph",{"_index":989,"title":{},"body":{"modules.html":{}}}],["gravatar",{"_index":400,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["gravatar.url(payload.email",{"_index":447,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["grow",{"_index":919,"title":{},"body":{"index.html":{}}}],["hapi/joi",{"_index":357,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"dependencies.html":{}}}],["hashed",{"_index":423,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["header",{"_index":1024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":835,"title":{},"body":{"index.html":{}}}],["heavily",{"_index":711,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":673,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["here",{"_index":927,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":935,"title":{},"body":{"license.html":{}}}],["holders",{"_index":976,"title":{},"body":{"license.html":{}}}],["hosting",{"_index":892,"title":{},"body":{"index.html":{}}}],["hour",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["hours",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["hrf",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["http",{"_index":449,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:27017",{"_index":794,"title":{},"body":{"index.html":{}}}],["http://localhost:9000",{"_index":793,"title":{},"body":{"index.html":{}}}],["https",{"_index":374,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"miscellaneous/variables.html":{}}}],["human",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["iat",{"_index":501,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":415,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["identifier",{"_index":624,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["igenericmessagebody",{"_index":393,"title":{"interfaces/IGenericMessageBody.html":{}},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":497,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["images",{"_index":790,"title":{},"body":{"index.html":{}}}],["implied",{"_index":967,"title":{},"body":{"license.html":{}}}],["import",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{}}}],["imports",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{}}}],["included",{"_index":962,"title":{},"body":{"license.html":{}}}],["including",{"_index":350,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":391,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["indicating",{"_index":809,"title":{},"body":{"index.html":{}}}],["inestapplication",{"_index":1004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["inject",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["inject(\"winston",{"_index":163,"title":{},"body":{"injectables/AppService.html":{}}}],["injectable",{"_index":150,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["injectables",{"_index":151,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"overview.html":{}}}],["injected",{"_index":328,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["injecting",{"_index":1036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectmodel",{"_index":403,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["injectmodel(\"profile",{"_index":413,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["inspired",{"_index":712,"title":{},"body":{"index.html":{}}}],["install",{"_index":769,"title":{},"body":{"index.html":{}}}],["instead",{"_index":823,"title":{},"body":{"index.html":{}}}],["interface",{"_index":278,"title":{"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":390,"title":{},"body":{"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"overview.html":{}}}],["ip",{"_index":848,"title":{},"body":{"index.html":{}}}],["iprofile",{"_index":250,"title":{"interfaces/IProfile.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["isalphanumeric",{"_index":513,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["isemail",{"_index":529,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["isenv",{"_index":320,"title":{},"body":{"classes/ConfigService.html":{}}}],["isenv(env",{"_index":336,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["isnotempty",{"_index":514,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["it's",{"_index":810,"title":{},"body":{"index.html":{}}}],["itokenreturnbody",{"_index":203,"title":{"interfaces/ITokenReturnBody.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"coverage.html":{}}}],["javascript",{"_index":349,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi",{"_index":356,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.number().default(1800",{"_index":378,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.object",{"_index":367,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.objectschema",{"_index":366,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().regex(/^mongodb",{"_index":380,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().required",{"_index":376,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["joi.string().uri",{"_index":372,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["join",{"_index":925,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":495,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":485,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["jwtstrategy",{"_index":223,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":332,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["kind",{"_index":966,"title":{},"body":{"license.html":{}}}],["layer",{"_index":908,"title":{},"body":{"index.html":{}}}],["leave",{"_index":855,"title":{},"body":{"index.html":{}}}],["legend",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["level",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["liability",{"_index":980,"title":{},"body":{"license.html":{}}}],["liable",{"_index":977,"title":{},"body":{"license.html":{}}}],["license",{"_index":928,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":918,"title":{},"body":{"index.html":{}}}],["limit",{"_index":671,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["limitation",{"_index":945,"title":{},"body":{"license.html":{}}}],["limited",{"_index":968,"title":{},"body":{"license.html":{}}}],["line",{"_index":742,"title":{},"body":{"index.html":{}}}],["lines",{"_index":828,"title":{},"body":{"index.html":{}}}],["loads",{"_index":786,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":768,"title":{},"body":{"index.html":{}}}],["locally",{"_index":732,"title":{},"body":{"index.html":{}}}],["location",{"_index":904,"title":{},"body":{"index.html":{}}}],["logger",{"_index":155,"title":{},"body":{"injectables/AppService.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["loggeroptions",{"_index":620,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["loggeropts",{"_index":1018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging",{"_index":721,"title":{},"body":{"index.html":{}}}],["login",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{}}}],["login(@body",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(payload",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["login/register",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["loginpayload",{"_index":177,"title":{"classes/LoginPayload.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"coverage.html":{}}}],["logs",{"_index":160,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["logs/application",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["made",{"_index":716,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":830,"title":{},"body":{"index.html":{}}}],["mainly",{"_index":802,"title":{},"body":{"index.html":{}}}],["make",{"_index":729,"title":{},"body":{"index.html":{}}}],["manually",{"_index":756,"title":{},"body":{"index.html":{}}}],["mapping",{"_index":359,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["matches",{"_index":340,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["matches(/^[a",{"_index":530,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["matching",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor((ntime",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["math.floor(ntime",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["max",{"_index":841,"title":{},"body":{"index.html":{}}}],["maxfiles",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["maxsize",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["merchantability",{"_index":970,"title":{},"body":{"license.html":{}}}],["merge",{"_index":947,"title":{},"body":{"license.html":{}}}],["message",{"_index":398,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["meta",{"_index":1021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["method",{"_index":500,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["minlength",{"_index":515,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["minlength(8",{"_index":517,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["mins",{"_index":813,"title":{},"body":{"index.html":{}}}],["minute",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["minutes",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["miscellaneous",{"_index":697,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":917,"title":{},"body":{"index.html":{},"license.html":{}}}],["mm",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["model",{"_index":401,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["models",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["modify",{"_index":740,"title":{},"body":{"index.html":{},"license.html":{}}}],["module",{"_index":36,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modulemetadata",{"_index":618,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["modules",{"_index":76,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/app/app.roles",{"_index":477,"title":{},"body":{"interfaces/IProfile.html":{}}}],["modules/auth/payload/register.payload",{"_index":407,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["mongo",{"_index":734,"title":{},"body":{"index.html":{}}}],["mongodb",{"_index":731,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":402,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"injectables/ProfileService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{}}}],["mongoosemodule.forfeature",{"_index":574,"title":{},"body":{"modules/ProfileModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoosemoduleasyncoptions",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":926,"title":{},"body":{"index.html":{}}}],["moving",{"_index":854,"title":{},"body":{"index.html":{}}}],["msanvarov",{"_index":933,"title":{},"body":{"license.html":{}}}],["mutated",{"_index":458,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["name",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"injectables/JwtStrategy.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["needed",{"_index":347,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["nest",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProfileController.html":{},"dependencies.html":{},"index.html":{}}}],["nestfactory.create",{"_index":837,"title":{},"body":{"index.html":{}}}],["nestfactory.create(appmodule",{"_index":844,"title":{},"body":{"index.html":{}}}],["nestfastifyapplication",{"_index":834,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces",{"_index":619,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["nestjs/core",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IGenericMessageBody.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":660,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["nestjs/swagger",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"classes/RegisterPayload.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":703,"title":{},"body":{"index.html":{}}}],["nodemon",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["non",{"_index":727,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":973,"title":{},"body":{"license.html":{}}}],["notacceptableexception",{"_index":405,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["note",{"_index":851,"title":{},"body":{"index.html":{}}}],["notice",{"_index":960,"title":{},"body":{"license.html":{}}}],["npm",{"_index":770,"title":{},"body":{"index.html":{}}}],["ntime",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["number",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["number(time",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["object",{"_index":326,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["obtaining",{"_index":940,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":863,"title":{},"body":{"index.html":{}}}],["offers",{"_index":817,"title":{},"body":{"index.html":{}}}],["one",{"_index":439,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["ones",{"_index":831,"title":{},"body":{"index.html":{}}}],["open",{"_index":895,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["operating",{"_index":747,"title":{},"body":{"index.html":{}}}],["operation",{"_index":397,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["operations",{"_index":909,"title":{},"body":{"index.html":{}}}],["optional",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["options",{"_index":598,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["options.imports",{"_index":613,"title":{},"body":{"modules/WinstonModule.html":{}}}],["options.inject",{"_index":1017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.usefactory",{"_index":1016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":983,"title":{},"body":{"license.html":{}}}],["out",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["outlined",{"_index":753,"title":{},"body":{"index.html":{}}}],["over",{"_index":820,"title":{},"body":{"index.html":{}}}],["overview",{"_index":991,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":653,"title":{"dependencies.html":{}},"body":{}}],["package.jsoncomes",{"_index":852,"title":{},"body":{"index.html":{}}}],["pages",{"_index":881,"title":{},"body":{"index.html":{}}}],["param",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["param(\"username",{"_index":567,"title":{},"body":{"controllers/ProfileController.html":{}}}],["parameter",{"_index":341,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["parameters",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{}}}],["parse",{"_index":354,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["parse(fs.readfilesync(filepath",{"_index":360,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["partial",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["particular",{"_index":549,"title":{},"body":{"controllers/ProfileController.html":{},"license.html":{}}}],["passport",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":492,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":493,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":424,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"miscellaneous/variables.html":{}}}],["password).digest(\"hex",{"_index":429,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["patch",{"_index":519,"title":{},"body":{"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{}}}],["patch()@useguards(undefined)@useroles({resource",{"_index":551,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofile",{"_index":534,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofile(@body",{"_index":564,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofile(payload",{"_index":550,"title":{},"body":{"controllers/ProfileController.html":{}}}],["patchprofilepayload",{"_index":410,"title":{"classes/PatchProfilePayload.html":{}},"body":{"interfaces/IGenericMessageBody.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["paylaod",{"_index":505,"title":{},"body":{"classes/LoginPayload.html":{}}}],["payload",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{}}}],["payload.password",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["payload.password).digest(\"hex",{"_index":446,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["payload.username",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["payload/login.payload",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["payload/patch.profile.payload",{"_index":411,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["payload/register.payload",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["per",{"_index":850,"title":{},"body":{"index.html":{}}}],["performance",{"_index":818,"title":{},"body":{"index.html":{}}}],["permission",{"_index":934,"title":{},"body":{"license.html":{}}}],["permit",{"_index":954,"title":{},"body":{"license.html":{}}}],["person",{"_index":939,"title":{},"body":{"license.html":{}}}],["personal",{"_index":765,"title":{},"body":{"index.html":{}}}],["persons",{"_index":955,"title":{},"body":{"license.html":{}}}],["pg",{"_index":452,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["pick",{"_index":615,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{}}}],["please",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["populated",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["port",{"_index":779,"title":{},"body":{"index.html":{}}}],["portions",{"_index":964,"title":{},"body":{"license.html":{}}}],["possession",{"_index":539,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"login",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"register",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@apiresponse({status",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apiresponse({status",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["pre",{"_index":773,"title":{},"body":{"index.html":{}}}],["preferred",{"_index":746,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{}}}],["prerequisites",{"_index":726,"title":{},"body":{"index.html":{}}}],["prettyprintseconds",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["prettyprintseconds(time",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["private",{"_index":162,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}}}],["proceed",{"_index":824,"title":{},"body":{"index.html":{}}}],["prod",{"_index":370,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["produce",{"_index":887,"title":{},"body":{"index.html":{}}}],["production",{"_index":774,"title":{},"body":{"index.html":{}}}],["profile",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["profile.controller",{"_index":573,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.deletedcount",{"_index":469,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["profile.model",{"_index":406,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["profile.service",{"_index":556,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/profile.model",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["profile/profile.module",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["profile/profile.service",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["profilecontroller",{"_index":531,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilemodel",{"_index":412,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["profilemodule",{"_index":88,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profiles",{"_index":537,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profileservice",{"_index":61,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":702,"title":{},"body":{"index.html":{}}}],["project",{"_index":789,"title":{},"body":{"index.html":{}}}],["promise",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["properties",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["protocol",{"_index":448,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["prototype",{"_index":718,"title":{},"body":{"index.html":{}}}],["provide",{"_index":314,"title":{},"body":{"modules/ConfigModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":435,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"license.html":{}}}],["provider",{"_index":1015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"overview.html":{}}}],["provides",{"_index":901,"title":{},"body":{"index.html":{}}}],["public",{"_index":610,"title":{},"body":{"modules/WinstonModule.html":{}}}],["publish",{"_index":948,"title":{},"body":{"license.html":{}}}],["purge",{"_index":864,"title":{},"body":{"index.html":{}}}],["purger",{"_index":861,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":972,"title":{},"body":{"license.html":{}}}],["queried",{"_index":416,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["quickly",{"_index":717,"title":{},"body":{"index.html":{}}}],["r",{"_index":451,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["random",{"_index":807,"title":{},"body":{"index.html":{}}}],["rate",{"_index":670,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["ratelimiter",{"_index":843,"title":{},"body":{"index.html":{}}}],["react",{"_index":782,"title":{},"body":{"index.html":{}}}],["read",{"_index":797,"title":{},"body":{"index.html":{}}}],["readable",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["readonly",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["received",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["received'})@apiresponse({status",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["recommended",{"_index":860,"title":{},"body":{"index.html":{}}}],["records",{"_index":471,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["reflect",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterPayload.html":{}}}],["register(@body",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(payload",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["registerpayload",{"_index":195,"title":{"classes/RegisterPayload.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"coverage.html":{}}}],["registration",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["relational",{"_index":905,"title":{},"body":{"index.html":{}}}],["remove",{"_index":543,"title":{},"body":{"controllers/ProfileController.html":{}}}],["removed",{"_index":804,"title":{},"body":{"index.html":{}}}],["removes",{"_index":542,"title":{},"body":{"controllers/ProfileController.html":{}}}],["removing",{"_index":865,"title":{},"body":{"index.html":{}}}],["replace",{"_index":763,"title":{},"body":{"index.html":{}}}],["represents",{"_index":381,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["req",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["req.user",{"_index":71,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"miscellaneous/variables.html":{}}}],["request'})@apiresponse({status",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["requests",{"_index":849,"title":{},"body":{"index.html":{}}}],["required",{"_index":478,"title":{},"body":{"interfaces/IProfile.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["resolve",{"_index":490,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["resource",{"_index":563,"title":{},"body":{"controllers/ProfileController.html":{}}}],["respectively",{"_index":795,"title":{},"body":{"index.html":{}}}],["response",{"_index":395,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["restful",{"_index":899,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":944,"title":{},"body":{"license.html":{}}}],["result",{"_index":72,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":548,"title":{},"body":{"controllers/ProfileController.html":{}}}],["return",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{}}}],["rights",{"_index":946,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["rm",{"_index":866,"title":{},"body":{"index.html":{}}}],["role",{"_index":443,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["roles",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesbuilder",{"_index":1022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["root",{"_index":153,"title":{},"body":{"injectables/AppService.html":{}}}],["rotate",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["rotatefile",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["route",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["run",{"_index":775,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":450,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["save",{"_index":869,"title":{},"body":{"index.html":{}}}],["saveif",{"_index":868,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":707,"title":{},"body":{"index.html":{}}}],["schema",{"_index":363,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IProfile.html":{},"modules/ProfileModule.html":{},"miscellaneous/variables.html":{}}}],["schema.types.objectid",{"_index":476,"title":{},"body":{"interfaces/IProfile.html":{}}}],["scheme",{"_index":373,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["schemes",{"_index":1034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["second",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["seconds",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["secret",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["secretorkey",{"_index":499,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":722,"title":{},"body":{"index.html":{}}}],["sell",{"_index":952,"title":{},"body":{"license.html":{}}}],["server",{"_index":708,"title":{},"body":{"index.html":{}}}],["service",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["set",{"_index":339,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["setdescription(swagger_api_description",{"_index":1007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setschemes(...swagger_api_schemes",{"_index":1009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":766,"title":{},"body":{"index.html":{}}}],["settitle(swagger_api_name",{"_index":1006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":745,"title":{},"body":{"index.html":{}}}],["setversion(swagger_api_current_version",{"_index":1008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":961,"title":{},"body":{"license.html":{}}}],["short",{"_index":1029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["showcase",{"_index":803,"title":{},"body":{"index.html":{}}}],["side",{"_index":709,"title":{},"body":{"index.html":{}}}],["signed",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["signoptions",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["simply",{"_index":885,"title":{},"body":{"index.html":{}}}],["software",{"_index":942,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"index.html":{}}}],["specification",{"_index":897,"title":{},"body":{"index.html":{}}}],["sponsors",{"_index":921,"title":{},"body":{"index.html":{}}}],["src/.../app.roles.ts",{"_index":699,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.hmr.ts",{"_index":1000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../profile.model.ts",{"_index":1001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../winston.constants.ts",{"_index":1003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../winston.interfaces.ts",{"_index":997,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../winston.providers.ts",{"_index":999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/main.hmr.ts",{"_index":626,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/modules/app/app.controller.ts:28",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/app/app.controller.ts:41",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/app/app.module.ts",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/app/app.roles.ts",{"_index":630,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/modules/app/app.service.ts",{"_index":152,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/modules/app/app.service.ts:24",{"_index":159,"title":{},"body":{"injectables/AppService.html":{}}}],["src/modules/app/app.service.ts:9",{"_index":156,"title":{},"body":{"injectables/AppService.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:32",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:45",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:35",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:56",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:74",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:90",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/jwt.strategy.ts",{"_index":480,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/jwt.strategy.ts:12",{"_index":483,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:35",{"_index":487,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/payload/login.payload.ts",{"_index":504,"title":{},"body":{"classes/LoginPayload.html":{},"coverage.html":{}}}],["src/modules/auth/payload/login.payload.ts:16",{"_index":511,"title":{},"body":{"classes/LoginPayload.html":{}}}],["src/modules/auth/payload/login.payload.ts:26",{"_index":508,"title":{},"body":{"classes/LoginPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts",{"_index":585,"title":{},"body":{"classes/RegisterPayload.html":{},"coverage.html":{}}}],["src/modules/auth/payload/register.payload.ts:22",{"_index":587,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:32",{"_index":591,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:42",{"_index":589,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/auth/payload/register.payload.ts:52",{"_index":590,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["src/modules/config/config.module.ts",{"_index":312,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/modules/config/config.service.ts",{"_index":318,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["src/modules/config/config.service.ts:19",{"_index":324,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:36",{"_index":345,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:70",{"_index":331,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:79",{"_index":337,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/modules/config/config.service.ts:8",{"_index":392,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts",{"_index":518,"title":{},"body":{"classes/PatchProfilePayload.html":{},"coverage.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:20",{"_index":521,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:30",{"_index":528,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:38",{"_index":525,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/payload/patch.profile.payload.ts:46",{"_index":527,"title":{},"body":{"classes/PatchProfilePayload.html":{}}}],["src/modules/profile/profile.controller.ts",{"_index":532,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/modules/profile/profile.controller.ts:40",{"_index":547,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:64",{"_index":553,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.controller.ts:82",{"_index":541,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/profile/profile.model.ts",{"_index":472,"title":{},"body":{"interfaces/IProfile.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/profile/profile.module.ts",{"_index":572,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/modules/profile/profile.service.ts",{"_index":394,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/modules/profile/profile.service.ts:104",{"_index":581,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:123",{"_index":580,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:29",{"_index":578,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:43",{"_index":582,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:52",{"_index":583,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:62",{"_index":584,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/profile/profile.service.ts:76",{"_index":579,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/modules/winston/winston.constants.ts",{"_index":637,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/winston/winston.interfaces.ts",{"_index":614,"title":{},"body":{"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/modules/winston/winston.module.ts",{"_index":592,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.module.ts:21",{"_index":596,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.module.ts:35",{"_index":603,"title":{},"body":{"modules/WinstonModule.html":{}}}],["src/modules/winston/winston.providers.ts",{"_index":640,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/swagger/constants.ts",{"_index":641,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/swagger/index.ts",{"_index":649,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["srv",{"_index":767,"title":{},"body":{"index.html":{}}}],["stack",{"_index":792,"title":{},"body":{"index.html":{}}}],["start",{"_index":772,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":777,"title":{},"body":{"index.html":{}}}],["started",{"_index":701,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":791,"title":{},"body":{"index.html":{}}}],["statements",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":321,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"modules/WinstonModule.html":{}}}],["status",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["steps",{"_index":752,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":481,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":957,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":950,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":963,"title":{},"body":{"license.html":{}}}],["super",{"_index":494,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":853,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":730,"title":{},"body":{"index.html":{}}}],["svg",{"_index":987,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":676,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["swagger_api_auth_location",{"_index":642,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_auth_name",{"_index":643,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_current_version",{"_index":644,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_description",{"_index":645,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_name",{"_index":646,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_root",{"_index":647,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swagger_api_schemes",{"_index":648,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":1012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup(swagger_api_root",{"_index":1013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":464,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["table",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":873,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":877,"title":{},"body":{"index.html":{}}}],["test:covnon",{"_index":876,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":875,"title":{},"body":{"index.html":{}}}],["testing",{"_index":870,"title":{},"body":{"index.html":{}}}],["tests",{"_index":872,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":920,"title":{},"body":{"index.html":{}}}],["then(profile",{"_index":468,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.appservice.root",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.createtoken(user",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(payload",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config.get(\"app_url",{"_index":166,"title":{},"body":{"injectables/AppService.html":{}}}],["this.configservice.get(\"webtoken_expiration_time",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.envconfig",{"_index":361,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.envconfig.app_env",{"_index":389,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.envconfig[key",{"_index":388,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["this.expiration",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.getbyusername(payload.username",{"_index":433,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.getbyusername(username",{"_index":465,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.jwtservice.sign",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.logger.info(\"logging",{"_index":167,"title":{},"body":{"injectables/AppService.html":{}}}],["this.prettyprintseconds(this.expiration",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["this.profilemodel",{"_index":426,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilemodel.deleteone",{"_index":467,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilemodel.findbyid(id).exec",{"_index":419,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilemodel.findone",{"_index":421,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profilemodel.updateone",{"_index":461,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["this.profileservice.create(payload",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.profileservice.delete(username",{"_index":568,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.edit(payload",{"_index":565,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getbyusername(username",{"_index":561,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getbyusernameandpass",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["throw",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["thus",{"_index":859,"title":{},"body":{"index.html":{}}}],["time",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"index.html":{}}}],["timediff",{"_index":503,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["timewindow",{"_index":842,"title":{},"body":{"index.html":{}}}],["token",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["tort",{"_index":982,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["transports",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IProfile.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{},"miscellaneous/variables.html":{}}}],["true})@isalphanumeric()@isnotempty",{"_index":510,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["true})@isemail()@isnotempty",{"_index":586,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["true})@isnotempty()@minlength(8",{"_index":507,"title":{},"body":{"classes/LoginPayload.html":{},"classes/RegisterPayload.html":{}}}],["true})@matches(/^[a",{"_index":588,"title":{},"body":{"classes/RegisterPayload.html":{}}}],["try",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["two",{"_index":827,"title":{},"body":{"index.html":{}}}],["type",{"_index":157,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":995,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":879,"title":{},"body":{"index.html":{}}}],["typeorm",{"_index":693,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["types",{"_index":1033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types/express",{"_index":867,"title":{},"body":{"index.html":{}}}],["typical",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/ProfileService.html":{}}}],["typing",{"_index":886,"title":{},"body":{"index.html":{}}}],["ui",{"_index":691,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{}}}],["unit",{"_index":871,"title":{},"body":{"index.html":{}}}],["unused",{"_index":862,"title":{},"body":{"index.html":{}}}],["up",{"_index":788,"title":{},"body":{"index.html":{}}}],["update",{"_index":552,"title":{},"body":{"controllers/ProfileController.html":{}}}],["updatedprofile",{"_index":460,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["updatedprofile.nmodified",{"_index":462,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"injectables/ProfileService.html":{}}}],["uri",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{}}}],["use",{"_index":822,"title":{},"body":{"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":805,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["useguards(authguard(\"jwt",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["usenewurlparser",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{}}}],["username",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"interfaces/ITokenReturnBody.html":{},"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterPayload.html":{},"miscellaneous/variables.html":{}}}],["useroles",{"_index":555,"title":{},"body":{"controllers/ProfileController.html":{}}}],["users",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["useunifiedtopology",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["usevalue",{"_index":315,"title":{},"body":{"modules/ConfigModule.html":{}}}],["using",{"_index":759,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":733,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":414,"title":{},"body":{"interfaces/IGenericMessageBody.html":{},"interfaces/IProfile.html":{},"injectables/ProfileService.html":{}}}],["valid",{"_index":488,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["valid(\"dev",{"_index":369,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validate",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":484,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":348,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validatedenvconfig",{"_index":384,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validateinput",{"_index":322,"title":{},"body":{"classes/ConfigService.html":{}}}],["validateinput(envconfig",{"_index":344,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["validates",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["validateuser",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(payload",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITokenReturnBody.html":{}}}],["validation",{"_index":382,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/JwtStrategy.html":{}}}],["validator",{"_index":516,"title":{},"body":{"classes/LoginPayload.html":{},"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{},"dependencies.html":{}}}],["value",{"_index":334,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":353,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{}}}],["variable",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{},"index.html":{}}}],["variables",{"_index":329,"title":{"miscellaneous/variables.html":{}},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["view",{"_index":911,"title":{},"body":{"index.html":{}}}],["vue",{"_index":783,"title":{},"body":{"index.html":{}}}],["warranties",{"_index":969,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":965,"title":{},"body":{"license.html":{}}}],["web",{"_index":750,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["webpack",{"_index":1020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webtoken_expiration_time",{"_index":377,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["webtoken_secret_key",{"_index":375,"title":{},"body":{"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"index.html":{}}}],["whether",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"interfaces/EnvConfig.html":{},"interfaces/IGenericMessageBody.html":{},"interfaces/ITokenReturnBody.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"license.html":{}}}],["windowms",{"_index":847,"title":{},"body":{"index.html":{}}}],["winson",{"_index":597,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["winston.format.json",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.interfaces",{"_index":606,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston.providers",{"_index":609,"title":{},"body":{"modules/WinstonModule.html":{}}}],["winston.transports.console",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["winston/winston.module",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_options",{"_index":638,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["winston_module_provider",{"_index":639,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["winstonmodule",{"_index":89,"title":{"modules/WinstonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WinstonModule.html":{},"modules.html":{},"overview.html":{}}}],["winstonmodule.forrootasync",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmoduleasyncoptions",{"_index":602,"title":{"interfaces/WinstonModuleAsyncOptions.html":{}},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["winstonmoduleoptions",{"_index":595,"title":{},"body":{"modules/WinstonModule.html":{},"interfaces/WinstonModuleAsyncOptions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":758,"title":{},"body":{"index.html":{},"license.html":{}}}],["work",{"_index":903,"title":{},"body":{"index.html":{}}}],["x1f3d7",{"_index":815,"title":{},"body":{"index.html":{}}}],["x1f433",{"_index":743,"title":{},"body":{"index.html":{}}}],["x1f465",{"_index":916,"title":{},"body":{"index.html":{}}}],["x1f4a1",{"_index":878,"title":{},"body":{"index.html":{}}}],["x1f4da",{"_index":714,"title":{},"body":{"index.html":{}}}],["x1f4dd",{"_index":894,"title":{},"body":{"index.html":{}}}],["x1f50a",{"_index":914,"title":{},"body":{"index.html":{}}}],["x1f512",{"_index":796,"title":{},"body":{"index.html":{}}}],["x1f680",{"_index":755,"title":{},"body":{"index.html":{}}}],["x1f6e0",{"_index":725,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":771,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":924,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["z",{"_index":524,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["za",{"_index":523,"title":{},"body":{"classes/PatchProfilePayload.html":{},"classes/RegisterPayload.html":{}}}],["zippedarchive",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/app.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProfile\n                            \n                            \n                                getString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('request/user')@UseGuards(undefined)@ApiResponse({status: 200, description: 'Request Received'})@ApiResponse({status: 400, description: 'Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/app/app.controller.ts:41\n                \n            \n\n\n            \n                \n                    Fetches request metadata\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request body\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Partial\n\n                    \n                    \n                        the request user populated from the passport module\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getString\n                        \n                        \n                    \n                \n            \n            \n                \ngetString()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)@ApiResponse({status: 200, description: 'Request Received'})@ApiResponse({status: 400, description: 'Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/app/app.controller.ts:28\n                \n            \n\n\n            \n                \n                    Returns the an environment variable from config file\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the application environment url\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Req, UseGuards } from \"@nestjs/common\";\nimport { AppService } from \"./app.service\";\nimport { ApiBearerAuth, ApiResponse } from \"@nestjs/swagger\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { Request } from \"express\";\n\n/**\n * App Controller\n */\n@Controller()\n@ApiBearerAuth()\nexport class AppController {\n  /**\n   * Constructor\n   * @param appService\n   * @param profileService\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returns the an environment variable from config file\n   * @returns {string} the application environment url\n   */\n  @Get()\n  @UseGuards(AuthGuard(\"jwt\"))\n  @ApiResponse({ status: 200, description: \"Request Received\" })\n  @ApiResponse({ status: 400, description: \"Request Failed\" })\n  getString(): string {\n    return this.appService.root();\n  }\n\n  /**\n   * Fetches request metadata\n   * @param {Req} req the request body\n   * @returns {Partial} the request user populated from the passport module\n   */\n  @Get(\"request/user\")\n  @UseGuards(AuthGuard(\"jwt\"))\n  @ApiResponse({ status: 200, description: \"Request Received\" })\n  @ApiResponse({ status: 400, description: \"Request Failed\" })\n  getProfile(@Req() req): Partial {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nWinstonModule\n\nWinstonModule\n\nAppModule -->\n\nWinstonModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            WinstonModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as winston from \"winston\";\nimport * as rotateFile from \"winston-daily-rotate-file\";\nimport { Module } from \"@nestjs/common\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { MongooseModule, MongooseModuleAsyncOptions } from \"@nestjs/mongoose\";\nimport { ConfigModule } from \"../config/config.module\";\nimport { ConfigService } from \"../config/config.service\";\nimport { AuthModule } from \"../auth/auth.module\";\nimport { ProfileModule } from \"../profile/profile.module\";\nimport { WinstonModule } from \"../winston/winston.module\";\nimport { AccessControlModule } from \"nest-access-control\";\nimport { roles } from \"./app.roles\";\n\n@Module({\n  imports: [\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) =>\n        ({\n          uri: configService.get(\"DB_URL\"),\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n        } as MongooseModuleAsyncOptions),\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.isEnv(\"dev\")\n          ? {\n              level: \"info\",\n              format: winston.format.json(),\n              defaultMeta: { service: \"user-service\" },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: \"info\",\n              format: winston.format.json(),\n              defaultMeta: { service: \"user-service\" },\n              transports: [\n                new winston.transports.File({\n                  filename: \"logs/error.log\",\n                  level: \"error\",\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new rotateFile({\n                  filename: \"logs/application-%DATE%.log\",\n                  datePattern: \"YYYY-MM-DD\",\n                  zippedArchive: true,\n                  maxSize: \"20m\",\n                  maxFiles: \"14d\",\n                }),\n              ],\n            };\n      },\n    }),\n    AccessControlModule.forRoles(roles),\n    ConfigModule,\n    AuthModule,\n    ProfileModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/app/app.service.ts\n        \n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                root\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/modules/app/app.service.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration service\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logger service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            root\n                        \n                        \n                    \n                \n            \n            \n                \nroot()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/app/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Fetches and logs the APP_URL environment variable from the configuration file.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the application url\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { ConfigService } from \"../config/config.service\";\nimport { Logger } from \"winston\";\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {ConfigService} config configuration service\n   * @param {Logger} logger logger service\n   */\n  constructor(\n    private config: ConfigService,\n    @Inject(\"winston\") private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Fetches and logs the APP_URL environment variable from the configuration file.\n   * @returns {string} the application url\n   */\n  root(): string {\n    const appURL = this.config.get(\"APP_URL\");\n    this.logger.info(\"Logging the APP_URL -> \" + appURL);\n    return appURL;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/auth\n            \n\n            \n                Description\n            \n            \n                Authentication Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n                    Login route to validate and create tokens for users\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n                    Registration route to create and generate tokens for users\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Post } from \"@nestjs/common\";\nimport { ApiResponse, ApiUseTags } from \"@nestjs/swagger\";\nimport { AuthService, ITokenReturnBody } from \"./auth.service\";\nimport { LoginPayload } from \"./payload/login.payload\";\nimport { RegisterPayload } from \"./payload/register.payload\";\nimport { ProfileService } from \"../profile/profile.service\";\n\n/**\n * Authentication Controller\n */\n@Controller(\"api/auth\")\n@ApiUseTags(\"authentication\")\nexport class AuthController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly profileService: ProfileService,\n  ) {}\n\n  /**\n   * Login route to validate and create tokens for users\n   * @param {LoginPayload} payload the login dto\n   */\n  @Post(\"login\")\n  @ApiResponse({ status: 201, description: \"Login Completed\" })\n  @ApiResponse({ status: 400, description: \"Bad Request\" })\n  @ApiResponse({ status: 401, description: \"Unauthorized\" })\n  async login(@Body() payload: LoginPayload): Promise {\n    const user = await this.authService.validateUser(payload);\n    return await this.authService.createToken(user);\n  }\n\n  /**\n   * Registration route to create and generate tokens for users\n   * @param {RegisterPayload} payload the registration dto\n   */\n  @Post(\"register\")\n  @ApiResponse({ status: 201, description: \"Registration Completed\" })\n  @ApiResponse({ status: 400, description: \"Bad Request\" })\n  @ApiResponse({ status: 401, description: \"Unauthorized\" })\n  async register(@Body() payload: RegisterPayload): Promise {\n    const user = await this.profileService.create(payload);\n    return await this.authService.createToken(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAuthModule -->\n\nProfileModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                        \n                            ProfileModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { ConfigModule } from \"../config/config.module\";\nimport { ConfigService } from \"../config/config.service\";\nimport { ProfileModule } from \"../profile/profile.module\";\nimport { AuthService } from \"./auth.service\";\nimport { JwtStrategy } from \"./jwt.strategy\";\nimport { AuthController } from \"./auth.controller\";\n\n@Module({\n  imports: [\n    ProfileModule,\n    ConfigModule,\n    PassportModule.register({ defaultStrategy: \"jwt\" }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get(\"WEBTOKEN_SECRET_KEY\"),\n          signOptions: {\n            ...(configService.get(\"WEBTOKEN_EXPIRATION_TIME\")\n              ? {\n                  expiresIn: Number(\n                    configService.get(\"WEBTOKEN_EXPIRATION_TIME\"),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [PassportModule.register({ defaultStrategy: \"jwt\" })],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createToken\n                            \n                            \n                                    Private\n                                prettyPrintSeconds\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, profileService: ProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:35\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        ProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                profile service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(undefined: IProfile)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:56\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on IProfile payload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                IProfile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        token body\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            prettyPrintSeconds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    prettyPrintSeconds(time: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:74\n                \n            \n\n\n            \n                \n                    Formats the time in seconds into human-readable format\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        hrf time\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(payload: LoginPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:90\n                \n            \n\n\n            \n                \n                    Validates whether or not the profile exists in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        login payload to authenticate with\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        registered profile\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            expiration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/auth.service.ts:35\n                            \n                        \n\n                \n                    \n                        Time in seconds when the token is to expire\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { ConfigService } from \"../config/config.service\";\nimport { ProfileService } from \"../profile/profile.service\";\nimport { IProfile } from \"../profile/profile.model\";\nimport { LoginPayload } from \"./payload/login.payload\";\n\n/**\n * Models a typical Login/Register route return body\n */\nexport interface ITokenReturnBody {\n  /**\n   * When the token is to expire in seconds\n   */\n  expires: string;\n  /**\n   * A human-readable format of expires\n   */\n  expiresPrettyPrint: string;\n  /**\n   * The Bearer token\n   */\n  token: string;\n}\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {string}\n   */\n  private readonly expiration: string;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {ConfigService} configService\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    this.expiration = this.configService.get(\"WEBTOKEN_EXPIRATION_TIME\");\n  }\n\n  /**\n   * Creates a signed jwt token based on IProfile payload\n   * @param {Profile} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  async createToken({\n    _id,\n    username,\n    email,\n    avatar,\n  }: IProfile): Promise {\n    return {\n      expires: this.expiration,\n      expiresPrettyPrint: this.prettyPrintSeconds(this.expiration),\n      token: this.jwtService.sign({ _id, username, email, avatar }),\n    };\n  }\n\n  /**\n   * Formats the time in seconds into human-readable format\n   * @param {string} time\n   * @returns {string} hrf time\n   */\n  private prettyPrintSeconds(time: string): string {\n    const ntime = Number(time);\n    const hours = Math.floor(ntime / 3600);\n    const minutes = Math.floor((ntime % 3600) / 60);\n    const seconds = Math.floor((ntime % 3600) % 60);\n\n    return `${hours > 0 ? hours + (hours === 1 ? \" hour,\" : \" hours,\") : \"\"} ${\n      minutes > 0 ? minutes + (minutes === 1 ? \" minute\" : \" minutes\") : \"\"\n    } ${seconds > 0 ? seconds + (seconds === 1 ? \" second\" : \" seconds\") : \"\"}`;\n  }\n\n  /**\n   * Validates whether or not the profile exists in the database\n   * @param {LoginPayload} payload login payload to authenticate with\n   * @returns {Promise} registered profile\n   */\n  async validateUser(payload: LoginPayload): Promise {\n    const user = await this.profileService.getByUsernameAndPass(\n      payload.username,\n      payload.password,\n    );\n    if (!user) {\n      throw new UnauthorizedException(\n        \"Could not authenticate. Please try again.\",\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/config/config.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigService } from \"./config.service\";\n\n@Module({\n  providers: [\n    {\n      provide: ConfigService,\n      useValue: new ConfigService(\".env\"),\n    },\n  ],\n  exports: [ConfigService],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/config/config.service.ts\n        \n\n            \n                Description\n            \n            \n                Config Service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                envConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                isEnv\n                            \n                            \n                                    Private\n                                    Static\n                                validateInput\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filePath: string)\n                    \n                \n                        \n                            \n                                Defined in src/modules/config/config.service.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EnvConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/config/config.service.ts:19\n                            \n                        \n\n                \n                    \n                        Object that will contain the injected environment variables\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:70\n                \n            \n\n\n            \n                \n                    Fetches the key from the configuration file\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the associated value for a given key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isEnv\n                        \n                        \n                    \n                \n            \n            \n                \nisEnv(env: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:79\n                \n            \n\n\n            \n                \n                    Checks whether the application environment set in the configuration file matches the environment parameter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    env\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Whether or not the environment variable matches the application environment\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            validateInput\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateInput(envConfig: EnvConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/config/config.service.ts:36\n                \n            \n\n\n            \n                \n                    Ensures all needed variables are set, and returns the validated JavaScript object\nincluding the applied default values.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    envConfig\n                                    \n                                                EnvConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the configuration object with variables from the configuration file\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EnvConfig\n\n                    \n                    \n                        a validated environment configuration object\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse } from \"dotenv\";\nimport * as joi from \"@hapi/joi\";\nimport * as fs from \"fs\";\n\n/**\n * Key-value mapping\n */\nexport interface EnvConfig {\n  [key: string]: string;\n}\n\n/**\n * Config Service\n */\nexport class ConfigService {\n  /**\n   * Object that will contain the injected environment variables\n   */\n  private readonly envConfig: EnvConfig;\n\n  /**\n   * Constructor\n   * @param {string} filePath\n   */\n  constructor(filePath: string) {\n    const config = parse(fs.readFileSync(filePath));\n    this.envConfig = ConfigService.validateInput(config);\n  }\n\n  /**\n   * Ensures all needed variables are set, and returns the validated JavaScript object\n   * including the applied default values.\n   * @param {EnvConfig} envConfig the configuration object with variables from the configuration file\n   * @returns {EnvConfig} a validated environment configuration object\n   */\n  private static validateInput(envConfig: EnvConfig): EnvConfig {\n    /**\n     * A schema to validate envConfig against\n     */\n    const envVarsSchema: joi.ObjectSchema = joi.object({\n      APP_ENV: joi\n        .string()\n        .valid(\"dev\", \"prod\")\n        .default(\"dev\"),\n      APP_URL: joi.string().uri({\n        scheme: [/https?/],\n      }),\n      WEBTOKEN_SECRET_KEY: joi.string().required(),\n      WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n      DB_URL: joi.string().regex(/^mongodb/),\n    });\n\n    /**\n     * Represents the status of validation check on the configuration file\n     */\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    );\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`);\n    }\n    return validatedEnvConfig;\n  }\n\n  /**\n   * Fetches the key from the configuration file\n   * @param {string} key\n   * @returns {string} the associated value for a given key\n   */\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n\n  /**\n   * Checks whether the application environment set in the configuration file matches the environment parameter\n   * @param {string} env\n   * @returns {boolean} Whether or not the environment variable matches the application environment\n   */\n  isEnv(env: string): boolean {\n    return this.envConfig.APP_ENV === env;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EnvConfig.html":{"url":"interfaces/EnvConfig.html","title":"interface - EnvConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EnvConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/config/config.service.ts\n        \n\n            \n                Description\n            \n            \n                Key-value mapping\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in src/modules/config/config.service.ts:8\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { parse } from \"dotenv\";\nimport * as joi from \"@hapi/joi\";\nimport * as fs from \"fs\";\n\n/**\n * Key-value mapping\n */\nexport interface EnvConfig {\n  [key: string]: string;\n}\n\n/**\n * Config Service\n */\nexport class ConfigService {\n  /**\n   * Object that will contain the injected environment variables\n   */\n  private readonly envConfig: EnvConfig;\n\n  /**\n   * Constructor\n   * @param {string} filePath\n   */\n  constructor(filePath: string) {\n    const config = parse(fs.readFileSync(filePath));\n    this.envConfig = ConfigService.validateInput(config);\n  }\n\n  /**\n   * Ensures all needed variables are set, and returns the validated JavaScript object\n   * including the applied default values.\n   * @param {EnvConfig} envConfig the configuration object with variables from the configuration file\n   * @returns {EnvConfig} a validated environment configuration object\n   */\n  private static validateInput(envConfig: EnvConfig): EnvConfig {\n    /**\n     * A schema to validate envConfig against\n     */\n    const envVarsSchema: joi.ObjectSchema = joi.object({\n      APP_ENV: joi\n        .string()\n        .valid(\"dev\", \"prod\")\n        .default(\"dev\"),\n      APP_URL: joi.string().uri({\n        scheme: [/https?/],\n      }),\n      WEBTOKEN_SECRET_KEY: joi.string().required(),\n      WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n      DB_URL: joi.string().regex(/^mongodb/),\n    });\n\n    /**\n     * Represents the status of validation check on the configuration file\n     */\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    );\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`);\n    }\n    return validatedEnvConfig;\n  }\n\n  /**\n   * Fetches the key from the configuration file\n   * @param {string} key\n   * @returns {string} the associated value for a given key\n   */\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n\n  /**\n   * Checks whether the application environment set in the configuration file matches the environment parameter\n   * @param {string} env\n   * @returns {boolean} Whether or not the environment variable matches the application environment\n   */\n  isEnv(env: string): boolean {\n    return this.envConfig.APP_ENV === env;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGenericMessageBody.html":{"url":"interfaces/IGenericMessageBody.html","title":"interface - IGenericMessageBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IGenericMessageBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.service.ts\n        \n\n            \n                Description\n            \n            \n                Models a typical response for a crud operation\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Status message to return\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import * as crypto from \"crypto\";\nimport * as gravatar from \"gravatar\";\nimport { Model } from \"mongoose\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n} from \"@nestjs/common\";\nimport { IProfile } from \"./profile.model\";\nimport { RegisterPayload } from \"modules/auth/payload/register.payload\";\nimport { AppRoles } from \"../app/app.roles\";\nimport { PatchProfilePayload } from \"./payload/patch.profile.payload\";\n\n/**\n * Models a typical response for a crud operation\n */\nexport interface IGenericMessageBody {\n  /**\n   * Status message to return\n   */\n  message: string;\n}\n\n/**\n * Profile Service\n */\n@Injectable()\nexport class ProfileService {\n  /**\n   * Constructor\n   * @param {Model} profileModel\n   */\n  constructor(\n    @InjectModel(\"Profile\") private readonly profileModel: Model,\n  ) {}\n\n  /**\n   * Fetches a profile from database by UUID\n   * @param {string} id\n   * @returns {Promise} queried profile data\n   */\n  get(id: string): Promise {\n    return this.profileModel.findById(id).exec();\n  }\n\n  /**\n   * Fetches a profile from database by username\n   * @param {string} username\n   * @returns {Promise} queried profile data\n   */\n  getByUsername(username: string): Promise {\n    return this.profileModel.findOne({ username }).exec();\n  }\n\n  /**\n   * Fetches a profile by their username and hashed password\n   * @param {string} username\n   * @param {string} password\n   * @returns {Promise} queried profile data\n   */\n  getByUsernameAndPass(username: string, password: string): Promise {\n    return this.profileModel\n      .findOne({\n        username,\n        password: crypto.createHmac(\"sha256\", password).digest(\"hex\"),\n      })\n      .exec();\n  }\n\n  /**\n   * Create a profile with RegisterPayload fields\n   * @param {RegisterPayload} payload profile payload\n   * @returns {Promise} created profile data\n   */\n  async create(payload: RegisterPayload): Promise {\n    const user = await this.getByUsername(payload.username);\n    if (user) {\n      throw new NotAcceptableException(\n        \"The account with the provided username currently exists. Please choose another one.\",\n      );\n    }\n    // this will auto assign the admin role to each created user\n    const createdProfile = new this.profileModel({\n      ...payload,\n      password: crypto.createHmac(\"sha256\", payload.password).digest(\"hex\"),\n      avatar: gravatar.url(payload.email, {\n        protocol: \"http\",\n        s: \"200\",\n        r: \"pg\",\n        d: \"404\",\n      }),\n      roles: AppRoles.ADMIN,\n    });\n\n    return createdProfile.save();\n  }\n\n  /**\n   * Edit profile data\n   * @param {PatchProfilePayload} payload\n   * @returns {Promise} mutated profile data\n   */\n  async edit(payload: PatchProfilePayload): Promise {\n    const { username } = payload;\n    const updatedProfile = await this.profileModel.updateOne(\n      { username },\n      payload,\n    );\n    if (updatedProfile.nModified !== 1) {\n      throw new BadRequestException(\n        \"The profile with that username does not exist in the system. Please try another username.\",\n      );\n    }\n    return this.getByUsername(username);\n  }\n\n  /**\n   * Delete profile given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the crud operation was completed\n   */\n  delete(username: string): Promise {\n    return this.profileModel.deleteOne({ username }).then(profile => {\n      if (profile.deletedCount === 1) {\n        return { message: `Deleted ${username} from records` };\n      } else {\n        throw new BadRequestException(\n          `Failed to delete a profile by the name of ${username}.`,\n        );\n      }\n    });\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IProfile.html":{"url":"interfaces/IProfile.html","title":"interface - IProfile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IProfile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.model.ts\n        \n\n            \n                Description\n            \n            \n                Mongoose Profile Document\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                        avatar\n                                \n                                \n                                        date\n                                \n                                \n                                        email\n                                \n                                \n                                        name\n                                \n                                \n                                        password\n                                \n                                \n                                        roles\n                                \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:     Schema.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Schema.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    UUID\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        avatar\n                                    \n                                \n                                \n                                    \n                                        avatar:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Gravatar\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Date\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Password\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                    \n                                \n                                \n                                    \n                                        roles:         AppRoles\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AppRoles\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Roles\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Username\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Schema, Document } from \"mongoose\";\nimport { AppRoles } from \"modules/app/app.roles\";\n\n/**\n * Mongoose Profile Schema\n */\nexport const Profile = new Schema({\n  username: { type: String, required: true },\n  email: { type: String, required: true },\n  name: { type: String, required: true },\n  password: { type: String, required: true },\n  avatar: { type: String, required: true },\n  roles: [{ type: String }],\n  date: {\n    type: Date,\n    default: Date.now,\n  },\n});\n\n/**\n * Mongoose Profile Document\n */\nexport interface IProfile extends Document {\n  /**\n   * UUID\n   */\n  readonly _id: Schema.Types.ObjectId;\n  /**\n   * Username\n   */\n  readonly username: string;\n  /**\n   * Email\n   */\n  readonly email: string;\n  /**\n   * Name\n   */\n  readonly name: string;\n  /**\n   * Password\n   */\n  password: string;\n  /**\n   * Gravatar\n   */\n  readonly avatar: string;\n  /**\n   * Roles\n   */\n  readonly roles: AppRoles;\n  /**\n   * Date\n   */\n  readonly date: Date;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITokenReturnBody.html":{"url":"interfaces/ITokenReturnBody.html","title":"interface - ITokenReturnBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITokenReturnBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                Models a typical Login/Register route return body\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        expires\n                                \n                                \n                                        expiresPrettyPrint\n                                \n                                \n                                        token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expires\n                                    \n                                \n                                \n                                    \n                                        expires:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    When the token is to expire in seconds\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresPrettyPrint\n                                    \n                                \n                                \n                                    \n                                        expiresPrettyPrint:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A human-readable format of expires\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Bearer token\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { ConfigService } from \"../config/config.service\";\nimport { ProfileService } from \"../profile/profile.service\";\nimport { IProfile } from \"../profile/profile.model\";\nimport { LoginPayload } from \"./payload/login.payload\";\n\n/**\n * Models a typical Login/Register route return body\n */\nexport interface ITokenReturnBody {\n  /**\n   * When the token is to expire in seconds\n   */\n  expires: string;\n  /**\n   * A human-readable format of expires\n   */\n  expiresPrettyPrint: string;\n  /**\n   * The Bearer token\n   */\n  token: string;\n}\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {string}\n   */\n  private readonly expiration: string;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {ConfigService} configService\n   * @param {ProfileService} profileService profile service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    this.expiration = this.configService.get(\"WEBTOKEN_EXPIRATION_TIME\");\n  }\n\n  /**\n   * Creates a signed jwt token based on IProfile payload\n   * @param {Profile} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  async createToken({\n    _id,\n    username,\n    email,\n    avatar,\n  }: IProfile): Promise {\n    return {\n      expires: this.expiration,\n      expiresPrettyPrint: this.prettyPrintSeconds(this.expiration),\n      token: this.jwtService.sign({ _id, username, email, avatar }),\n    };\n  }\n\n  /**\n   * Formats the time in seconds into human-readable format\n   * @param {string} time\n   * @returns {string} hrf time\n   */\n  private prettyPrintSeconds(time: string): string {\n    const ntime = Number(time);\n    const hours = Math.floor(ntime / 3600);\n    const minutes = Math.floor((ntime % 3600) / 60);\n    const seconds = Math.floor((ntime % 3600) % 60);\n\n    return `${hours > 0 ? hours + (hours === 1 ? \" hour,\" : \" hours,\") : \"\"} ${\n      minutes > 0 ? minutes + (minutes === 1 ? \" minute\" : \" minutes\") : \"\"\n    } ${seconds > 0 ? seconds + (seconds === 1 ? \" second\" : \" seconds\") : \"\"}`;\n  }\n\n  /**\n   * Validates whether or not the profile exists in the database\n   * @param {LoginPayload} payload login payload to authenticate with\n   * @returns {Promise} registered profile\n   */\n  async validateUser(payload: LoginPayload): Promise {\n    const user = await this.profileService.getByUsernameAndPass(\n      payload.username,\n      payload.password,\n    );\n    if (!user) {\n      throw new UnauthorizedException(\n        \"Could not authenticate. Please try again.\",\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt.strategy.ts\n        \n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, profileService: ProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        ProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: JwtPayload, done)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/jwt.strategy.ts:35\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    \n                                            JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    done\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        callback to resolve the request user with\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not to validate the jwt token\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, JwtPayload, Strategy } from \"passport-jwt\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Injectable, UnauthorizedException } from \"@nestjs/common\";\n\nimport { ConfigService } from \"../config/config.service\";\nimport { ProfileService } from \"../profile/profile.service\";\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {ProfileService} profileService\n   */\n  constructor(\n    readonly configService: ConfigService,\n    private readonly profileService: ProfileService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get(\"WEBTOKEN_SECRET_KEY\"),\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {JwtPayload} jwtPayload validation method for jwt token\n   * @param {any} done callback to resolve the request user with\n   * @returns {Promise} whether or not to validate the jwt token\n   */\n  async validate({ iat, exp, _id }: JwtPayload, done): Promise {\n    const timeDiff = exp - iat;\n    if (timeDiff \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginPayload.html":{"url":"classes/LoginPayload.html","title":"class - LoginPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/payload/login.payload.ts\n        \n\n            \n                Description\n            \n            \n                Login Paylaod Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/login.payload.ts:26\n                            \n                        \n\n                \n                    \n                        Password field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/login.payload.ts:16\n                            \n                        \n\n                \n                    \n                        Username field\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger\";\nimport { IsAlphanumeric, IsNotEmpty, MinLength } from \"class-validator\";\n\n/**\n * Login Paylaod Class\n */\nexport class LoginPayload {\n  /**\n   * Username field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Password field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchProfilePayload.html":{"url":"classes/PatchProfilePayload.html","title":"class - PatchProfilePayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchProfilePayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/payload/patch.profile.payload.ts\n        \n\n            \n                Description\n            \n            \n                Patch Profile Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsEmail()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/payload/patch.profile.payload.ts:20\n                            \n                        \n\n                \n                    \n                        Email field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/payload/patch.profile.payload.ts:38\n                            \n                        \n\n                \n                    \n                        Name field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/payload/patch.profile.payload.ts:46\n                            \n                        \n\n                \n                    \n                        Password field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/payload/patch.profile.payload.ts:30\n                            \n                        \n\n                \n                    \n                        Username field\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger\";\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  IsAlphanumeric,\n  Matches,\n} from \"class-validator\";\n\n/**\n * Patch Profile Payload Class\n */\nexport class PatchProfilePayload {\n  /**\n   * Email field\n   */\n  @ApiModelProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiModelProperty()\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/profile\n            \n\n            \n                Description\n            \n            \n                Profile Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                patchProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username')@UseGuards(undefined, ACGuard)@UseRoles({resource: 'profiles', action: 'delete', possession: 'any'})@ApiResponse({status: 200, description: 'Delete Profile Request Received'})@ApiResponse({status: 400, description: 'Delete Profile Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:82\n                \n            \n\n\n            \n                \n                    Removes a profile from the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        whether or not the profile has been deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@UseGuards(undefined)@ApiResponse({status: 200, description: 'Fetch Profile Request Received'})@ApiResponse({status: 400, description: 'Fetch Profile Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:40\n                \n            \n\n\n            \n                \n                    Retrieves a particular profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the profile given username to fetch\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            patchProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patchProfile(payload: PatchProfilePayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@UseGuards(undefined)@UseRoles({resource: 'profiles', action: 'update', possession: 'any'})@ApiResponse({status: 200, description: 'Patch Profile Request Received'})@ApiResponse({status: 400, description: 'Patch Profile Request Failed'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/profile.controller.ts:64\n                \n            \n\n\n            \n                \n                    Edit a profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchProfilePayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        mutated profile data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { ACGuard, UseRoles } from \"nest-access-control\";\nimport { ApiBearerAuth, ApiResponse, ApiUseTags } from \"@nestjs/swagger\";\nimport { ProfileService, IGenericMessageBody } from \"./profile.service\";\nimport { PatchProfilePayload } from \"./payload/patch.profile.payload\";\nimport { IProfile } from \"./profile.model\";\n\n/**\n * Profile Controller\n */\n@ApiBearerAuth()\n@ApiUseTags(\"profile\")\n@Controller(\"api/profile\")\nexport class ProfileController {\n  /**\n   * Constructor\n   * @param profileService\n   */\n  constructor(private readonly profileService: ProfileService) {}\n\n  /**\n   * Retrieves a particular profile\n   * @param username the profile given username to fetch\n   * @returns {Promise} queried profile data\n   */\n  @Get(\":username\")\n  @UseGuards(AuthGuard(\"jwt\"))\n  @ApiResponse({ status: 200, description: \"Fetch Profile Request Received\" })\n  @ApiResponse({ status: 400, description: \"Fetch Profile Request Failed\" })\n  async getProfile(@Param(\"username\") username: string): Promise {\n    const profile = await this.profileService.getByUsername(username);\n    if (!profile) {\n      throw new BadRequestException(\n        \"The profile with that username could not be found.\",\n      );\n    }\n    return profile;\n  }\n\n  /**\n   * Edit a profile\n   * @param {RegisterPayload} payload\n   * @returns {Promise} mutated profile data\n   */\n  @Patch()\n  @UseGuards(AuthGuard(\"jwt\"))\n  @UseRoles({\n    resource: \"profiles\",\n    action: \"update\",\n    possession: \"any\",\n  })\n  @ApiResponse({ status: 200, description: \"Patch Profile Request Received\" })\n  @ApiResponse({ status: 400, description: \"Patch Profile Request Failed\" })\n  async patchProfile(@Body() payload: PatchProfilePayload) {\n    return await this.profileService.edit(payload);\n  }\n\n  /**\n   * Removes a profile from the database\n   * @param {string} username the username to remove\n   * @returns {Promise} whether or not the profile has been deleted\n   */\n  @Delete(\":username\")\n  @UseGuards(AuthGuard(\"jwt\"), ACGuard)\n  @UseRoles({\n    resource: \"profiles\",\n    action: \"delete\",\n    possession: \"any\",\n  })\n  @ApiResponse({ status: 200, description: \"Delete Profile Request Received\" })\n  @ApiResponse({ status: 400, description: \"Delete Profile Request Failed\" })\n  async delete(\n    @Param(\"username\") username: string,\n  ): Promise {\n    return await this.profileService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nProfileService \n\nProfileService \n\n\n\nProfileModule\n\nProfileModule\n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/profile/profile.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ProfileService } from \"./profile.service\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { Profile } from \"./profile.model\";\nimport { ProfileController } from \"./profile.controller\";\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: \"Profile\", schema: Profile }])],\n  providers: [ProfileService],\n  exports: [ProfileService],\n  controllers: [ProfileController],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/profile.service.ts\n        \n\n            \n                Description\n            \n            \n                Profile Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                    Async\n                                edit\n                            \n                            \n                                get\n                            \n                            \n                                getByUsername\n                            \n                            \n                                getByUsernameAndPass\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profileModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/profile/profile.service.ts:29\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profileModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: RegisterPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:76\n                \n            \n\n\n            \n                \n                    Create a profile with RegisterPayload fields\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        profile payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        created profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:123\n                \n            \n\n\n            \n                \n                    Delete profile given a username\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        whether or not the crud operation was completed\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            edit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(payload: PatchProfilePayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:104\n                \n            \n\n\n            \n                \n                    Edit profile data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                PatchProfilePayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:43\n                \n            \n\n\n            \n                \n                    Fetches a profile from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getByUsername\n                        \n                        \n                    \n                \n            \n            \n                \ngetByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:52\n                \n            \n\n\n            \n                \n                    Fetches a profile from database by username\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried profile data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getByUsernameAndPass\n                        \n                        \n                    \n                \n            \n            \n                \ngetByUsernameAndPass(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/profile.service.ts:62\n                \n            \n\n\n            \n                \n                    Fetches a profile by their username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried profile data\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as crypto from \"crypto\";\nimport * as gravatar from \"gravatar\";\nimport { Model } from \"mongoose\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n} from \"@nestjs/common\";\nimport { IProfile } from \"./profile.model\";\nimport { RegisterPayload } from \"modules/auth/payload/register.payload\";\nimport { AppRoles } from \"../app/app.roles\";\nimport { PatchProfilePayload } from \"./payload/patch.profile.payload\";\n\n/**\n * Models a typical response for a crud operation\n */\nexport interface IGenericMessageBody {\n  /**\n   * Status message to return\n   */\n  message: string;\n}\n\n/**\n * Profile Service\n */\n@Injectable()\nexport class ProfileService {\n  /**\n   * Constructor\n   * @param {Model} profileModel\n   */\n  constructor(\n    @InjectModel(\"Profile\") private readonly profileModel: Model,\n  ) {}\n\n  /**\n   * Fetches a profile from database by UUID\n   * @param {string} id\n   * @returns {Promise} queried profile data\n   */\n  get(id: string): Promise {\n    return this.profileModel.findById(id).exec();\n  }\n\n  /**\n   * Fetches a profile from database by username\n   * @param {string} username\n   * @returns {Promise} queried profile data\n   */\n  getByUsername(username: string): Promise {\n    return this.profileModel.findOne({ username }).exec();\n  }\n\n  /**\n   * Fetches a profile by their username and hashed password\n   * @param {string} username\n   * @param {string} password\n   * @returns {Promise} queried profile data\n   */\n  getByUsernameAndPass(username: string, password: string): Promise {\n    return this.profileModel\n      .findOne({\n        username,\n        password: crypto.createHmac(\"sha256\", password).digest(\"hex\"),\n      })\n      .exec();\n  }\n\n  /**\n   * Create a profile with RegisterPayload fields\n   * @param {RegisterPayload} payload profile payload\n   * @returns {Promise} created profile data\n   */\n  async create(payload: RegisterPayload): Promise {\n    const user = await this.getByUsername(payload.username);\n    if (user) {\n      throw new NotAcceptableException(\n        \"The account with the provided username currently exists. Please choose another one.\",\n      );\n    }\n    // this will auto assign the admin role to each created user\n    const createdProfile = new this.profileModel({\n      ...payload,\n      password: crypto.createHmac(\"sha256\", payload.password).digest(\"hex\"),\n      avatar: gravatar.url(payload.email, {\n        protocol: \"http\",\n        s: \"200\",\n        r: \"pg\",\n        d: \"404\",\n      }),\n      roles: AppRoles.ADMIN,\n    });\n\n    return createdProfile.save();\n  }\n\n  /**\n   * Edit profile data\n   * @param {PatchProfilePayload} payload\n   * @returns {Promise} mutated profile data\n   */\n  async edit(payload: PatchProfilePayload): Promise {\n    const { username } = payload;\n    const updatedProfile = await this.profileModel.updateOne(\n      { username },\n      payload,\n    );\n    if (updatedProfile.nModified !== 1) {\n      throw new BadRequestException(\n        \"The profile with that username does not exist in the system. Please try another username.\",\n      );\n    }\n    return this.getByUsername(username);\n  }\n\n  /**\n   * Delete profile given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the crud operation was completed\n   */\n  delete(username: string): Promise {\n    return this.profileModel.deleteOne({ username }).then(profile => {\n      if (profile.deletedCount === 1) {\n        return { message: `Deleted ${username} from records` };\n      } else {\n        throw new BadRequestException(\n          `Failed to delete a profile by the name of ${username}.`,\n        );\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterPayload.html":{"url":"classes/RegisterPayload.html","title":"class - RegisterPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/payload/register.payload.ts\n        \n\n            \n                Description\n            \n            \n                Register Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsEmail()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:22\n                            \n                        \n\n                \n                    \n                        Email field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@Matches(/^[a-zA-Z ]+$/)@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:42\n                            \n                        \n\n                \n                    \n                        Name field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsNotEmpty()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:52\n                            \n                        \n\n                \n                    \n                        Password field\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({required: true})@IsAlphanumeric()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/payload/register.payload.ts:32\n                            \n                        \n\n                \n                    \n                        Username field\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger\";\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  IsAlphanumeric,\n  Matches,\n} from \"class-validator\";\n\n/**\n * Register Payload Class\n */\nexport class RegisterPayload {\n  /**\n   * Email field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * Username field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  username: string;\n\n  /**\n   * Name field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @Matches(/^[a-zA-Z ]+$/)\n  @IsNotEmpty()\n  name: string;\n\n  /**\n   * Password field\n   */\n  @ApiModelProperty({\n    required: true,\n  })\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WinstonModule.html":{"url":"modules/WinstonModule.html","title":"module - WinstonModule","body":"\n                   \n\n\n\n\n    Modules\n    WinstonModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/winston/winston.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: WinstonModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/winston/winston.module.ts:21\n                \n            \n\n\n            \n                \n                    Constructor for winson module\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                WinstonModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRootAsync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: WinstonModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/winston/winston.module.ts:35\n                \n            \n\n\n            \n                \n                    Asynchronous constructor for winston module\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                WinstonModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport {\n  WinstonModuleAsyncOptions,\n  WinstonModuleOptions,\n} from \"./winston.interfaces\";\nimport {\n  createWinstonAsyncProviders,\n  createWinstonProviders,\n} from \"./winston.providers\";\n\n@Global()\n@Module({})\n/**\n * Represents a Winston Module\n */\nexport class WinstonModule {\n  /**\n   * Constructor for winson module\n   * @param options\n   */\n  public static forRoot(options: WinstonModuleOptions): DynamicModule {\n    const providers = createWinstonProviders(options);\n\n    return {\n      module: WinstonModule,\n      providers,\n      exports: providers,\n    };\n  }\n\n  /**\n   * Asynchronous constructor for winston module\n   * @param options\n   */\n  public static forRootAsync(\n    options: WinstonModuleAsyncOptions,\n  ): DynamicModule {\n    const providers = createWinstonAsyncProviders(options);\n\n    return {\n      module: WinstonModule,\n      imports: options.imports,\n      providers,\n      exports: providers,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WinstonModuleAsyncOptions.html":{"url":"interfaces/WinstonModuleAsyncOptions.html","title":"interface - WinstonModuleAsyncOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  WinstonModuleAsyncOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/winston/winston.interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Asynchronous winston module options\n\n            \n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        inject\n                                \n                                \n                                        useFactory\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Providers to inject\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Default factory method that returns winston module options\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ModuleMetadata } from \"@nestjs/common/interfaces\";\nimport { LoggerOptions } from \"winston\";\n\n/**\n * Logger options\n */\nexport type WinstonModuleOptions = LoggerOptions;\n\n/**\n * Asynchronous winston module options\n */\nexport interface WinstonModuleAsyncOptions\n  extends Pick {\n  /**\n   * Default factory method that returns winston module options\n   */\n  useFactory: (\n    ...args: any[]\n  ) => Promise | WinstonModuleOptions;\n\n  /**\n   * Providers to inject\n   */\n  inject?: any[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/main.hmr.ts\n            \n            variable\n            module\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/app/app.roles.ts\n            \n            variable\n            roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            interface\n            ITokenReturnBody\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/payload/login.payload.ts\n            \n            class\n            LoginPayload\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/payload/register.payload.ts\n            \n            class\n            RegisterPayload\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/config/config.service.ts\n            \n            class\n            ConfigService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/config/config.service.ts\n            \n            interface\n            EnvConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/profile/payload/patch.profile.payload.ts\n            \n            class\n            PatchProfilePayload\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.model.ts\n            \n            interface\n            IProfile\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.model.ts\n            \n            variable\n            Profile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/profile/profile.service.ts\n            \n            interface\n            IGenericMessageBody\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.constants.ts\n            \n            variable\n            WINSTON_MODULE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.constants.ts\n            \n            variable\n            WINSTON_MODULE_PROVIDER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.interfaces.ts\n            \n            interface\n            WinstonModuleAsyncOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.providers.ts\n            \n            variable\n            createWinstonAsyncProviders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/winston/winston.providers.ts\n            \n            variable\n            createWinstonProviders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_AUTH_LOCATION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_AUTH_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/constants.ts\n            \n            variable\n            SWAGGER_API_SCHEMES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/swagger/index.ts\n            \n            variable\n            configureOpenAPI\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : 16.1.4\n        \n            @nestjs/common : 6.7.2\n        \n            @nestjs/core : 6.7.2\n        \n            @nestjs/jwt : 6.1.1\n        \n            @nestjs/mongoose : 6.1.2\n        \n            @nestjs/passport : 6.1.0\n        \n            @nestjs/platform-express : 6.7.2\n        \n            @nestjs/platform-fastify : 6.7.2\n        \n            @nestjs/swagger : 3.1.0\n        \n            @nestjs/typeorm : 6.1.3\n        \n            class-transformer : 0.2.3\n        \n            class-validator : 0.10.1\n        \n            crypto : 1.0.1\n        \n            dotenv : 8.1.0\n        \n            express-rate-limit : 5.0.0\n        \n            fastify-helmet : 3.0.1\n        \n            fastify-rate-limit : 2.3.0\n        \n            fastify-swagger : 2.4.0\n        \n            gravatar : 1.8.0\n        \n            mongoose : 5.7.1\n        \n            nodemon : 1.19.2\n        \n            nest-access-control : 2.0.1\n        \n            passport : 0.4.0\n        \n            passport-jwt : 4.0.0\n        \n            reflect-metadata : 0.1.13\n        \n            rimraf : 3.0.0\n        \n            rxjs : 6.5.3\n        \n            swagger-ui-express : 4.1.1\n        \n            typeorm : 0.2.19\n        \n            winston : 3.2.1\n        \n            winston-daily-rotate-file : 4.1.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppRoles   (src/.../app.roles.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/app/app.roles.ts\n    \n        \n            \n                \n                    \n                        \n                        AppRoles\n                    \n                \n                        \n                            \n                                 DEFAULT\n                            \n                        \n                        \n                            \n                                Value : DEFAULT\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n  \n\n&#x1F4DA; Description\nThis boilerplate is made to quickly prototype backend applications. It comes with database, logging, security, and authentication features out of the box.\n\n&#x1F6E0;️ Prerequisites\nNon Docker\n\nPlease make sure to have MongoDB locally, or utilize Mongo on the cloud by configuration a cluster in atlas. Then grab the connection string and modify the following line.\n\nDocker &#x1F433;\n\nPlease make sure to have docker desktop setup on any preferred operating system to quickly compose both the MongoDB and web application. Then follow the steps outlined below.\n\n\n&#x1F680; Setup\nManually Deploying without Docker\n\nCreate a .env file using the cp .env.example .env command and replace the existing env variables with personal settings (MongoDB URL either srv or localhost)\n\nInstall dependencies using npm i or yarn\n\nStart the app for pre-production using npm run start or for development using npm run start:dev (the app will be exposed on the port 9000; not to conflict with React, Angular, or Vue)\n\n\nDeploying with Docker &#x1F433;\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container with required configuration\n$ docker-compose up\nThe following command will set up the project for you (building the Docker images, starting docker-compose stack). The Web application and mongo will be exposed to http://localhost:9000 and http://localhost:27017 respectively\n\n&#x1F512; Environment Configuration\nBy default, the application comes with a config module that can inject the ConfigService and read every environment variable from the .env. file.\nAPP_ENV - the application environment it will be executing as, either in development or production. Determines the type of logging options to utilize. Options: dev or prod. \nAPP_URL - the base URL for the application. Made mainly to showcase the ConfigService and can be removed if not used.\nWEBTOKEN_SECRET_KEY - the secret key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this. Not \nWEBTOKEN_EXPIRATION_TIME - the time in seconds indicating when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_URL - the URL to the MongoDB collection\n\n&#x1F3D7; Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But this can be changed to use Express framework instead of Fastify. Please proceed the steps below to change between the two.\n\nReplace the following lines of code in the main.ts file with the ones detailed below.\n\n// from (fastify):\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\nimport * as headers from 'fastify-helmet';\nimport * as fastifyRateLimiter from 'fastify-rate-limit';\nconst app = await NestFactory.create(\n  AppModule,\n  new FastifyAdapter({ logger: console }),\n);\napp.register(headers);\napp.register(fastifyRateLimiter, {\n  max: 100,\n  timeWindow: '1 minute',\n});\n\n// to (express):\nimport * as headers from 'helmet';\nimport * as rateLimiter from 'express-rate-limit';\nconst app = await NestFactory.create(AppModule, {\n  logger: console,\n});\napp.use(headers());\napp.use(\n  rateLimiter({\n    windowMs: 60, // 1 minutes\n    max: 100, // limit each IP to 100 requests per windowMs\n  }),\n);Note: The package.jsoncomes with dependencies for both Express and Fastify to support moving between two. But this can leave the project bloated especially when only one web framework is being used. Thus it is recommended that when deploying to production, a purger of unused dependencies occurs. \nIf you choose to use Fastify, this command will purge all of the Express dependencies:\n# removing Express dependencies\n$ npm rm @nestjs/platform-express express-rate-limit helmet swagger-ui-express @types/express --saveIf you choose to use Express, this command will purge all of the Fastify dependencies:\n# removing Fastify dependencies\n$ npm rm @nestjs/platform-fastify fastify-helmet fastify-rate-limit fastify-swagger --save\n✅ Testing\nDocker &#x1F433;\n# unit tests\n$ docker exec -it nest yarn test\n\n# e2e tests\n$ docker exec -it nest yarn test:e2e\n\n# test coverage\n$ docker exec -it nest yarn test:covNon-Docker\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n&#x1F4A1; TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, simply, by typing npm run typedocs. This will produce a docs folder with the required front-end files and start hosting on localhost port 8080.\n# generate docs for code\n$ npm run typedocs\n&#x1F4DD; Open API\nOut of the box, the web app comes with an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n&#x1F50A; Logs\nThis boilerplate comes with a Winston module for logging, the configurations for Winston can be found in the app module.\n\n&#x1F465; Support\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\n\nLicense\nNest is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 msanvarov\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WinstonModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAuthModule -->\n\nConfigModule->AuthModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAuthModule -->\n\nProfileModule->AuthModule\n\n\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nProfileService \n\nProfileService \n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nWinstonModule\n\nWinstonModule\n\nAppModule -->\n\nWinstonModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            WinstonModuleOptions   (src/.../winston.interfaces.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/winston/winston.interfaces.ts\n    \n    \n        \n            \n                \n                    \n                    WinstonModuleOptions\n                \n            \n            \n                \n                    Logger options\n\n                \n            \n            \n                \n                        LoggerOptions\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            configureOpenAPI   (src/.../index.ts)\n                        \n                        \n                            createWinstonAsyncProviders   (src/.../winston.providers.ts)\n                        \n                        \n                            createWinstonProviders   (src/.../winston.providers.ts)\n                        \n                        \n                            module   (src/.../main.hmr.ts)\n                        \n                        \n                            Profile   (src/.../profile.model.ts)\n                        \n                        \n                            roles   (src/.../app.roles.ts)\n                        \n                        \n                            SWAGGER_API_AUTH_LOCATION   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_AUTH_NAME   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_CURRENT_VERSION   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_DESCRIPTION   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_NAME   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_ROOT   (src/.../constants.ts)\n                        \n                        \n                            SWAGGER_API_SCHEMES   (src/.../constants.ts)\n                        \n                        \n                            WINSTON_MODULE_OPTIONS   (src/.../winston.constants.ts)\n                        \n                        \n                            WINSTON_MODULE_PROVIDER   (src/.../winston.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/swagger/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            configureOpenAPI\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (app: INestApplication) => {\n  const options = new DocumentBuilder()\n    .setTitle(SWAGGER_API_NAME)\n    .setDescription(SWAGGER_API_DESCRIPTION)\n    .setVersion(SWAGGER_API_CURRENT_VERSION)\n    .setSchemes(...SWAGGER_API_SCHEMES)\n    .addBearerAuth(SWAGGER_API_AUTH_NAME, SWAGGER_API_AUTH_LOCATION)\n    .build();\n  const document = SwaggerModule.createDocument(app, options);\n  SwaggerModule.setup(SWAGGER_API_ROOT, app, document);\n}\n                        \n                    \n\n                \n                    \n                        Open api configuration to be used as a basis for web application\n\n                    \n                \n\n            \n        \n\n    src/modules/winston/winston.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            createWinstonAsyncProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  options: WinstonModuleAsyncOptions,\n): Provider[] => {\n  return [\n    {\n      provide: WINSTON_MODULE_OPTIONS,\n      useFactory: options.useFactory,\n      inject: options.inject || [],\n    },\n    {\n      provide: WINSTON_MODULE_PROVIDER,\n      useFactory: (loggerOpts: LoggerOptions) => createLogger(loggerOpts),\n      inject: [WINSTON_MODULE_OPTIONS],\n    },\n  ];\n}\n                        \n                    \n\n                \n                    \n                        Async constructor for a winston provider\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createWinstonProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  loggerOpts: WinstonModuleOptions,\n): Provider[] => {\n  return [\n    {\n      provide: WINSTON_MODULE_PROVIDER,\n      useFactory: () => createLogger(loggerOpts),\n    },\n  ];\n}\n                        \n                    \n\n                \n                    \n                        Constructor a winston provider\n\n                    \n                \n\n            \n        \n\n    src/main.hmr.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            module\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n                \n                    \n                        Represents the webpack meta data\n\n                    \n                \n\n            \n        \n\n    src/modules/profile/profile.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Profile\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  username: { type: String, required: true },\n  email: { type: String, required: true },\n  name: { type: String, required: true },\n  password: { type: String, required: true },\n  avatar: { type: String, required: true },\n  roles: [{ type: String }],\n  date: {\n    type: Date,\n    default: Date.now,\n  },\n})\n                        \n                    \n\n                \n                    \n                        Mongoose Profile Schema\n\n                    \n                \n\n            \n        \n\n    src/modules/app/app.roles.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RolesBuilder\n\n                        \n                    \n                    \n                        \n                            Default value : new RolesBuilder()\n                        \n                    \n\n                \n                    \n                        Roles Builder\n\n                    \n                \n\n            \n        \n\n    src/swagger/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_AUTH_LOCATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"header\"\n                        \n                    \n\n                \n                    \n                        Where the SWAGGER_API_AUTH_NAME will be used in the request\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_AUTH_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"Authorization\"\n                        \n                    \n\n                \n                    \n                        The default authentication method\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_CURRENT_VERSION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"1.0\"\n                        \n                    \n\n                \n                    \n                        Current version of the api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_DESCRIPTION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"API Description\"\n                        \n                    \n\n                \n                    \n                        A short description for api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"API\"\n                        \n                    \n\n                \n                    \n                        The name given to the api\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_ROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"api/docs\"\n                        \n                    \n\n                \n                    \n                        The endpoint for open api ui\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SWAGGER_API_SCHEMES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                    \n                        \n                            Default value : [\"http\", \"https\"]\n                        \n                    \n\n                \n                    \n                        Types of api schemes\n\n                    \n                \n\n            \n        \n\n    src/modules/winston/winston.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            WINSTON_MODULE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"WinstonModuleOptions\"\n                        \n                    \n\n                \n                    \n                        Token for the type of configuration to be used when declaring in the app module\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WINSTON_MODULE_PROVIDER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"winston\"\n                        \n                    \n\n                \n                    \n                        An identifier to use for injecting the winston provider\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
